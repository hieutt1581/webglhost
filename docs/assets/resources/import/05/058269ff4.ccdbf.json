[1,["00b7YqjLpOu5g66RVB6kOg@6c48a","e8nvTNcnhNw5Q6hRWlTNP5@6c48a","d1NGQ2rJZCcbhjH0/erZWw","b5jtrXxk5HFq4ZtrpeFxrw@6c48a","a2WPFyuahHua4KoDngtmh6@6c48a"],["_textureSource","mainTexture","_effectAsset"],["cc.SpriteFrame",["cc.Material",["_techIdx","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","shaders","techniques"],0],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3]],[[3,0,1,2,3,4,5],[1,0,1,2,3,4],[2,0,1,2,4]],[[[{"name":"CayCau 4","rect":{"x":0,"y":0,"width":487,"height":272},"offset":{"x":0,"y":0},"originalSize":{"width":487,"height":272},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[0],[0]],[[[1,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[1,2],[1,2]],[[[2,"builtin-particle",[{"hash":1675533382,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":3941086264,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":1119886308,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":37}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":2874101136,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  vec3 rotTmp = a_texCoord2;\n  float mulFactor = 1.0;\n  if (rotTmp.x > 10.0 * 0.5) {\n      rotTmp.x -= 10.0;\n      mulFactor = -1.0;\n  }\n  vec4 rot = vec4(rotTmp, 0.0);\n  rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":37}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[0,"Fx_Fishing","\r\nFx_Fishing.png\r\nsize: 835,393\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nFoam_1\r\n  rotate: false\r\n  xy: 689, 2\r\n  size: 15, 17\r\n  orig: 15, 17\r\n  offset: 0, 0\r\n  index: -1\r\nFx/Water_2 (1)\r\n  rotate: false\r\n  xy: 303, 28\r\n  size: 36, 46\r\n  orig: 144, 138\r\n  offset: 9, 5\r\n  index: -1\r\nFx/Water_2 (10)\r\n  rotate: true\r\n  xy: 574, 2\r\n  size: 103, 113\r\n  orig: 144, 138\r\n  offset: 28, 5\r\n  index: -1\r\nFx/Water_2 (11)\r\n  rotate: false\r\n  xy: 733, 185\r\n  size: 100, 106\r\n  orig: 144, 138\r\n  offset: 33, 6\r\n  index: -1\r\nFx/Water_2 (12)\r\n  rotate: false\r\n  xy: 734, 293\r\n  size: 98, 98\r\n  orig: 144, 138\r\n  offset: 37, 6\r\n  index: -1\r\nFx/Water_2 (13)\r\n  rotate: true\r\n  xy: 135, 2\r\n  size: 97, 81\r\n  orig: 144, 138\r\n  offset: 42, 5\r\n  index: -1\r\nFx/Water_2 (14)\r\n  rotate: false\r\n  xy: 728, 128\r\n  size: 86, 55\r\n  orig: 144, 138\r\n  offset: 58, 6\r\n  index: -1\r\nFx/Water_2 (15)\r\n  rotate: true\r\n  xy: 689, 21\r\n  size: 84, 50\r\n  orig: 144, 138\r\n  offset: 60, 5\r\n  index: -1\r\nFx/Water_2 (16)\r\n  rotate: false\r\n  xy: 741, 76\r\n  size: 76, 21\r\n  orig: 144, 138\r\n  offset: 68, 6\r\n  index: -1\r\nFx/Water_2 (17)\r\n  rotate: true\r\n  xy: 467, 115\r\n  size: 73, 10\r\n  orig: 144, 138\r\n  offset: 71, 6\r\n  index: -1\r\nFx/Water_2 (2)\r\n  rotate: true\r\n  xy: 218, 6\r\n  size: 68, 83\r\n  orig: 144, 138\r\n  offset: 11, 5\r\n  index: -1\r\nFx/Water_2 (3)\r\n  rotate: true\r\n  xy: 372, 23\r\n  size: 87, 106\r\n  orig: 144, 138\r\n  offset: 11, 5\r\n  index: -1\r\nFx/Water_2 (4)\r\n  rotate: false\r\n  xy: 480, 2\r\n  size: 92, 116\r\n  orig: 144, 138\r\n  offset: 13, 5\r\n  index: -1\r\nFx/Water_2 (5)\r\n  rotate: true\r\n  xy: 480, 120\r\n  size: 96, 123\r\n  orig: 144, 138\r\n  offset: 15, 4\r\n  index: -1\r\nFx/Water_2 (6)\r\n  rotate: true\r\n  xy: 488, 218\r\n  size: 100, 124\r\n  orig: 144, 138\r\n  offset: 17, 4\r\n  index: -1\r\nFx/Water_2 (7)\r\n  rotate: false\r\n  xy: 135, 101\r\n  size: 103, 122\r\n  orig: 144, 138\r\n  offset: 18, 5\r\n  index: -1\r\nFx/Water_2 (8)\r\n  rotate: true\r\n  xy: 605, 107\r\n  size: 105, 121\r\n  orig: 144, 138\r\n  offset: 19, 4\r\n  index: -1\r\nFx/Water_2 (9)\r\n  rotate: true\r\n  xy: 614, 214\r\n  size: 104, 117\r\n  orig: 144, 138\r\n  offset: 24, 5\r\n  index: -1\r\nshckwve/shckwve_1\r\n  rotate: false\r\n  xy: 741, 99\r\n  size: 92, 27\r\n  orig: 92, 27\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_10\r\n  rotate: false\r\n  xy: 488, 320\r\n  size: 244, 71\r\n  orig: 244, 71\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_11\r\n  rotate: false\r\n  xy: 244, 254\r\n  size: 241, 62\r\n  orig: 241, 62\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_12\r\n  rotate: false\r\n  xy: 240, 190\r\n  size: 238, 62\r\n  orig: 238, 62\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_2\r\n  rotate: false\r\n  xy: 240, 76\r\n  size: 130, 34\r\n  orig: 130, 34\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_3\r\n  rotate: true\r\n  xy: 77, 2\r\n  size: 186, 56\r\n  orig: 186, 56\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_5\r\n  rotate: true\r\n  xy: 2, 2\r\n  size: 221, 73\r\n  orig: 221, 73\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_6\r\n  rotate: false\r\n  xy: 240, 112\r\n  size: 225, 76\r\n  orig: 225, 76\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_7\r\n  rotate: false\r\n  xy: 2, 225\r\n  size: 236, 81\r\n  orig: 236, 81\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_8\r\n  rotate: false\r\n  xy: 2, 308\r\n  size: 240, 83\r\n  orig: 240, 83\r\n  offset: 0, 0\r\n  index: -1\r\nshckwve/shckwve_9\r\n  rotate: false\r\n  xy: 244, 318\r\n  size: 242, 73\r\n  orig: 242, 73\r\n  offset: 0, 0\r\n  index: -1\r\n",["Fx_Fishing.png"],{"skeleton":{"hash":"Tf4OUJ3KRRpWmucUl1w6EZmwG2Q","spine":"3.8.99","images":"./images/","audio":"D:/WORK_ALLL/DAU_NTF/PVU/Screen"},"bones":[{"name":"root","x":0.43},{"name":"All","parent":"root"},{"name":"Fx/Water_2 (1)","parent":"All","x":16.44,"y":-5.46,"scaleX":-0.6,"scaleY":0.6},{"name":"shckwve","parent":"root","x":-0.43,"scaleX":0.6,"scaleY":0.6}],"slots":[{"name":"Fx/Water_2 (1)","bone":"Fx/Water_2 (1)"},{"name":"Foam_1","bone":"All"},{"name":"shckwve","bone":"shckwve"}],"skins":[{"name":"default","attachments":{"Foam_1":{"Foam_1":{"type":"mesh","hull":4,"width":15,"height":17,"uvs":[1,1,0,1,0,0,1,0],"triangles":[1,2,3,1,3,0],"vertices":[-7.99,-20.08,-40.49,-22.78,-35.57,6.03,-2.83,7.99],"edges":[0,2,2,4,4,6,0,6]}},"Fx/Water_2 (1)":{"Fx/Water_2 (1)":{"x":16.84,"y":60.34,"width":144,"height":138},"Fx/Water_2 (2)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (3)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (4)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (5)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (6)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (7)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (8)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (9)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (10)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (11)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (12)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (13)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (14)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (15)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (16)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (17)":{"x":22.54,"y":63.19,"width":144,"height":138}},"shckwve":{"shckwve/shckwve_1":{"y":0.5,"width":92,"height":27},"shckwve/shckwve_2":{"width":130,"height":34},"shckwve/shckwve_3":{"width":186,"height":56},"shckwve/shckwve_5":{"x":0.5,"y":0.5,"width":221,"height":73},"shckwve/shckwve_6":{"x":0.5,"width":225,"height":76},"shckwve/shckwve_7":{"y":0.5,"width":236,"height":81},"shckwve/shckwve_8":{"y":0.5,"width":240,"height":83},"shckwve/shckwve_9":{"y":0.5,"width":242,"height":73},"shckwve/shckwve_10":{"y":0.5,"width":244,"height":71},"shckwve/shckwve_11":{"x":0.5,"width":241,"height":62},"shckwve/shckwve_12":{"width":238,"height":62}}}}],"animations":{"Shockwave":{"slots":{"shckwve":{"attachment":[{"name":"shckwve/shckwve_1"},{"time":0.0333,"name":"shckwve/shckwve_2"},{"time":0.0667,"name":"shckwve/shckwve_3"},{"time":0.1,"name":"shckwve/shckwve_5"},{"time":0.1333,"name":"shckwve/shckwve_6"},{"time":0.1667,"name":"shckwve/shckwve_7"},{"time":0.2,"name":"shckwve/shckwve_8"},{"time":0.2333,"name":"shckwve/shckwve_9"},{"time":0.2667,"name":"shckwve/shckwve_10"},{"time":0.3,"name":"shckwve/shckwve_11"},{"time":0.3333,"name":"shckwve/shckwve_12"},{"time":0.3667,"name":null}]}},"bones":{"shckwve":{"translate":[{},{"time":0.3667,"y":-15.12}],"scale":[{"x":0.537},{"time":0.3667,"x":0.854,"y":1.267}]}}},"Water":{"slots":{"Foam_1":{"color":[{"time":0.3667,"color":"ffffffff"},{"time":0.4667,"color":"ffffff00"}],"attachment":[{"name":"Foam_1"}]},"Fx/Water_2 (1)":{"attachment":[{"name":"Fx/Water_2 (1)"},{"time":0.0333,"name":"Fx/Water_2 (2)"},{"time":0.0667,"name":"Fx/Water_2 (3)"},{"time":0.1,"name":"Fx/Water_2 (4)"},{"time":0.1333,"name":"Fx/Water_2 (5)"},{"time":0.1667,"name":"Fx/Water_2 (7)"},{"time":0.2,"name":"Fx/Water_2 (8)"},{"time":0.2333,"name":"Fx/Water_2 (10)"},{"time":0.2667,"name":"Fx/Water_2 (11)"},{"time":0.3,"name":"Fx/Water_2 (12)"},{"time":0.3333,"name":"Fx/Water_2 (14)"},{"time":0.3667,"name":"Fx/Water_2 (15)"},{"time":0.4,"name":"Fx/Water_2 (16)"},{"time":0.4333,"name":"Fx/Water_2 (17)"},{"time":0.4667,"name":null}]}},"bones":{"All":{"translate":[{"x":-33.68,"y":8.42},{"time":0.4667,"x":12.03,"y":2.41}]}},"deform":{"default":{"Foam_1":{"Foam_1":[{"vertices":[51.45091,11.73992,58.26688,7.94193,57.8669,-2.59206,42.1529,-5.32405]},{"time":0.1,"vertices":[49.68592,12.69394,33.56192,0.38598,39.45193,-0.52802,39.64791,1.91998]},{"time":0.3333,"vertices":[23.04596,12.69394,9.51197,11.85594,25.02197,-2.74801,18.55793,-5.48]},{"time":0.4667,"vertices":[7.87598,19.72395,29.86194,21.47594,25.02197,-3.85801,-1.42205,-7.33]}]}}}}}},[0]]],0,0,[0],[-1],[3]],[[[0,"Fishing","\r\nFishing.png\r\nsize: 1009,740\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nBobber\r\n  rotate: false\r\n  xy: 965, 61\r\n  size: 41, 61\r\n  orig: 43, 63\r\n  offset: 1, 1\r\n  index: -1\r\nBody\r\n  rotate: false\r\n  xy: 2, 392\r\n  size: 199, 346\r\n  orig: 199, 346\r\n  offset: 0, 0\r\n  index: -1\r\nElip_Eye\r\n  rotate: false\r\n  xy: 533, 275\r\n  size: 12, 12\r\n  orig: 14, 14\r\n  offset: 1, 1\r\n  index: -1\r\nEye\r\n  rotate: true\r\n  xy: 833, 394\r\n  size: 50, 62\r\n  orig: 52, 64\r\n  offset: 1, 1\r\n  index: -1\r\nEye_1\r\n  rotate: true\r\n  xy: 808, 3\r\n  size: 47, 51\r\n  orig: 47, 51\r\n  offset: 0, 0\r\n  index: -1\r\nEye_2\r\n  rotate: false\r\n  xy: 861, 3\r\n  size: 45, 47\r\n  orig: 45, 47\r\n  offset: 0, 0\r\n  index: -1\r\nEye_Close\r\n  rotate: true\r\n  xy: 897, 524\r\n  size: 40, 13\r\n  orig: 42, 15\r\n  offset: 1, 1\r\n  index: -1\r\nEyebrow_B\r\n  rotate: true\r\n  xy: 988, 268\r\n  size: 42, 19\r\n  orig: 44, 21\r\n  offset: 1, 1\r\n  index: -1\r\nEyebrow_T2\r\n  rotate: true\r\n  xy: 988, 231\r\n  size: 35, 17\r\n  orig: 37, 19\r\n  offset: 1, 1\r\n  index: -1\r\nFoam_1\r\n  rotate: true\r\n  xy: 157, 155\r\n  size: 15, 17\r\n  orig: 15, 17\r\n  offset: 0, 0\r\n  index: -1\r\nFoam_2\r\n  rotate: true\r\n  xy: 948, 13\r\n  size: 23, 15\r\n  orig: 23, 15\r\n  offset: 0, 0\r\n  index: -1\r\nFoam_4\r\n  rotate: false\r\n  xy: 908, 8\r\n  size: 38, 28\r\n  orig: 38, 28\r\n  offset: 0, 0\r\n  index: -1\r\nFoam_6\r\n  rotate: false\r\n  xy: 833, 446\r\n  size: 19, 13\r\n  orig: 21, 15\r\n  offset: 1, 1\r\n  index: -1\r\nFoam_7\r\n  rotate: false\r\n  xy: 965, 22\r\n  size: 24, 12\r\n  orig: 26, 14\r\n  offset: 1, 1\r\n  index: -1\r\nFoam_Blue1\r\n  rotate: true\r\n  xy: 728, 14\r\n  size: 24, 30\r\n  orig: 24, 30\r\n  offset: 0, 0\r\n  index: -1\r\nFoam_Blue2\r\n  rotate: false\r\n  xy: 658, 15\r\n  size: 35, 24\r\n  orig: 35, 24\r\n  offset: 0, 0\r\n  index: -1\r\nFoam_Blue3\r\n  rotate: false\r\n  xy: 695, 14\r\n  size: 31, 24\r\n  orig: 31, 24\r\n  offset: 0, 0\r\n  index: -1\r\nFx/Water (1)\r\n  rotate: false\r\n  xy: 833, 338\r\n  size: 59, 54\r\n  orig: 196, 201\r\n  offset: 21, 71\r\n  index: -1\r\nFx/Water (10)\r\n  rotate: false\r\n  xy: 346, 166\r\n  size: 185, 174\r\n  orig: 196, 201\r\n  offset: 7, 12\r\n  index: -1\r\nFx/Water (11)\r\n  rotate: false\r\n  xy: 157, 172\r\n  size: 187, 175\r\n  orig: 196, 201\r\n  offset: 7, 12\r\n  index: -1\r\nFx/Water (12)\r\n  rotate: false\r\n  xy: 203, 349\r\n  size: 188, 175\r\n  orig: 196, 201\r\n  offset: 7, 12\r\n  index: -1\r\nFx/Water (13)\r\n  rotate: false\r\n  xy: 203, 526\r\n  size: 189, 176\r\n  orig: 196, 201\r\n  offset: 7, 11\r\n  index: -1\r\nFx/Water (14)\r\n  rotate: true\r\n  xy: 2, 2\r\n  size: 151, 176\r\n  orig: 196, 201\r\n  offset: 6, 11\r\n  index: -1\r\nFx/Water (15)\r\n  rotate: false\r\n  xy: 567, 405\r\n  size: 150, 140\r\n  orig: 196, 201\r\n  offset: 8, 10\r\n  index: -1\r\nFx/Water (16)\r\n  rotate: false\r\n  xy: 157, 349\r\n  size: 40, 41\r\n  orig: 196, 201\r\n  offset: 118, 83\r\n  index: -1\r\nFx/Water (2)\r\n  rotate: false\r\n  xy: 719, 343\r\n  size: 112, 116\r\n  orig: 196, 201\r\n  offset: 17, 38\r\n  index: -1\r\nFx/Water (3)\r\n  rotate: false\r\n  xy: 567, 273\r\n  size: 150, 130\r\n  orig: 196, 201\r\n  offset: 15, 30\r\n  index: -1\r\nFx/Water (4)\r\n  rotate: true\r\n  xy: 180, 2\r\n  size: 162, 134\r\n  orig: 196, 201\r\n  offset: 12, 27\r\n  index: -1\r\nFx/Water (5)\r\n  rotate: false\r\n  xy: 316, 14\r\n  size: 171, 150\r\n  orig: 196, 201\r\n  offset: 9, 21\r\n  index: -1\r\nFx/Water (6)\r\n  rotate: true\r\n  xy: 394, 524\r\n  size: 178, 159\r\n  orig: 196, 201\r\n  offset: 8, 18\r\n  index: -1\r\nFx/Water (7)\r\n  rotate: true\r\n  xy: 393, 342\r\n  size: 180, 172\r\n  orig: 196, 201\r\n  offset: 8, 12\r\n  index: -1\r\nFx/Water (8)\r\n  rotate: false\r\n  xy: 731, 566\r\n  size: 182, 172\r\n  orig: 196, 201\r\n  offset: 8, 12\r\n  index: -1\r\nFx/Water (9)\r\n  rotate: true\r\n  xy: 555, 547\r\n  size: 183, 174\r\n  orig: 196, 201\r\n  offset: 8, 12\r\n  index: -1\r\nFx/Water_2 (1)\r\n  rotate: true\r\n  xy: 567, 2\r\n  size: 36, 46\r\n  orig: 144, 138\r\n  offset: 9, 5\r\n  index: -1\r\nFx/Water_2 (10)\r\n  rotate: false\r\n  xy: 808, 52\r\n  size: 103, 113\r\n  orig: 144, 138\r\n  offset: 28, 5\r\n  index: -1\r\nFx/Water_2 (11)\r\n  rotate: true\r\n  xy: 897, 412\r\n  size: 100, 106\r\n  orig: 144, 138\r\n  offset: 33, 6\r\n  index: -1\r\nFx/Water_2 (12)\r\n  rotate: false\r\n  xy: 897, 312\r\n  size: 98, 98\r\n  orig: 144, 138\r\n  offset: 37, 6\r\n  index: -1\r\nFx/Water_2 (13)\r\n  rotate: true\r\n  xy: 905, 213\r\n  size: 97, 81\r\n  orig: 144, 138\r\n  offset: 42, 5\r\n  index: -1\r\nFx/Water_2 (14)\r\n  rotate: false\r\n  xy: 804, 281\r\n  size: 86, 55\r\n  orig: 144, 138\r\n  offset: 58, 6\r\n  index: -1\r\nFx/Water_2 (15)\r\n  rotate: true\r\n  xy: 913, 38\r\n  size: 84, 50\r\n  orig: 144, 138\r\n  offset: 60, 5\r\n  index: -1\r\nFx/Water_2 (16)\r\n  rotate: false\r\n  xy: 489, 24\r\n  size: 76, 21\r\n  orig: 144, 138\r\n  offset: 68, 6\r\n  index: -1\r\nFx/Water_2 (17)\r\n  rotate: false\r\n  xy: 316, 2\r\n  size: 73, 10\r\n  orig: 144, 138\r\n  offset: 71, 6\r\n  index: -1\r\nFx/Water_2 (2)\r\n  rotate: true\r\n  xy: 719, 273\r\n  size: 68, 83\r\n  orig: 144, 138\r\n  offset: 11, 5\r\n  index: -1\r\nFx/Water_2 (3)\r\n  rotate: false\r\n  xy: 915, 514\r\n  size: 87, 106\r\n  orig: 144, 138\r\n  offset: 11, 5\r\n  index: -1\r\nFx/Water_2 (4)\r\n  rotate: false\r\n  xy: 915, 622\r\n  size: 92, 116\r\n  orig: 144, 138\r\n  offset: 13, 5\r\n  index: -1\r\nFx/Water_2 (5)\r\n  rotate: false\r\n  xy: 608, 41\r\n  size: 96, 123\r\n  orig: 144, 138\r\n  offset: 15, 4\r\n  index: -1\r\nFx/Water_2 (6)\r\n  rotate: false\r\n  xy: 706, 40\r\n  size: 100, 124\r\n  orig: 144, 138\r\n  offset: 17, 4\r\n  index: -1\r\nFx/Water_2 (7)\r\n  rotate: true\r\n  xy: 731, 461\r\n  size: 103, 122\r\n  orig: 144, 138\r\n  offset: 18, 5\r\n  index: -1\r\nFx/Water_2 (8)\r\n  rotate: true\r\n  xy: 663, 166\r\n  size: 105, 121\r\n  orig: 144, 138\r\n  offset: 19, 4\r\n  index: -1\r\nFx/Water_2 (9)\r\n  rotate: true\r\n  xy: 786, 167\r\n  size: 104, 117\r\n  orig: 144, 138\r\n  offset: 24, 5\r\n  index: -1\r\nHand_Back\r\n  rotate: false\r\n  xy: 913, 124\r\n  size: 67, 87\r\n  orig: 67, 87\r\n  offset: 0, 0\r\n  index: -1\r\nHand_Font\r\n  rotate: false\r\n  xy: 533, 166\r\n  size: 128, 105\r\n  orig: 128, 105\r\n  offset: 0, 0\r\n  index: -1\r\nLine_Body\r\n  rotate: false\r\n  xy: 855, 446\r\n  size: 40, 118\r\n  orig: 40, 118\r\n  offset: 0, 0\r\n  index: -1\r\nNeb_Bird\r\n  rotate: true\r\n  xy: 760, 17\r\n  size: 21, 31\r\n  orig: 21, 31\r\n  offset: 0, 0\r\n  index: -1\r\nR\r\n  rotate: true\r\n  xy: 965, 36\r\n  size: 23, 42\r\n  orig: 44, 51\r\n  offset: 10, 5\r\n  index: -1\r\nRod_Fishing\r\n  rotate: true\r\n  xy: 203, 704\r\n  size: 26, 341\r\n  orig: 28, 343\r\n  offset: 1, 1\r\n  index: -1\r\nShadow_bobber\r\n  rotate: true\r\n  xy: 533, 289\r\n  size: 51, 23\r\n  orig: 64, 28\r\n  offset: 8, 3\r\n  index: -1\r\nShadown_Bird\r\n  rotate: true\r\n  xy: 2, 155\r\n  size: 235, 153\r\n  orig: 263, 163\r\n  offset: 3, 3\r\n  index: -1\r\nShadown_body\r\n  rotate: false\r\n  xy: 489, 47\r\n  size: 117, 117\r\n  orig: 139, 139\r\n  offset: 11, 11\r\n  index: -1\r\nSweat\r\n  rotate: false\r\n  xy: 555, 532\r\n  size: 10, 13\r\n  orig: 12, 15\r\n  offset: 1, 1\r\n  index: -1\r\nWire\r\n  rotate: false\r\n  xy: 203, 732\r\n  size: 442, 6\r\n  orig: 442, 6\r\n  offset: 0, 0\r\n  index: -1\r\nZ\r\n  rotate: true\r\n  xy: 615, 2\r\n  size: 36, 41\r\n  orig: 38, 43\r\n  offset: 1, 1\r\n  index: -1\r\n",["Fishing.png"],{"skeleton":{"hash":"RD61ae/ZEBVtpD0jyVK4mBkkOeQ","spine":"3.8.99","x":-2042.29,"y":-980.33,"width":3000,"height":1846},"bones":[{"name":"root","x":0.43},{"name":"All","parent":"root"},{"name":"Body_Bird","parent":"All","x":5.29,"y":12.21},{"name":"Body_Bird2","parent":"Body_Bird","length":58.45,"rotation":108.54,"x":-0.39,"y":0.58},{"name":"Body_Bird3","parent":"Body_Bird2","length":121.69,"rotation":2.67,"x":58.45},{"name":"Body_Bird4","parent":"Body_Bird3","length":19.58,"rotation":79.48,"x":135.65,"y":6.68},{"name":"Body_Bird5","parent":"Body_Bird4","length":14.36,"rotation":10.04,"x":19.58},{"name":"Body_Bird6","parent":"Body_Bird5","length":18.23,"rotation":25.08,"x":14.36},{"name":"Body_Bird7","parent":"Body_Bird","length":36.1,"rotation":-135,"x":-35.15,"y":-26.53},{"name":"Body_Bird8","parent":"Body_Bird7","length":31.95,"rotation":20.94,"x":35.37,"y":0.74},{"name":"Body_Bird9","parent":"Body_Bird8","length":25.65,"rotation":-66.71,"x":31.54,"y":1.21},{"name":"Body_Bird10","parent":"Body_Bird","length":60.57,"rotation":-128.81,"x":34.29,"y":-32.79},{"name":"Body_Bird11","parent":"Body_Bird10","length":30.45,"rotation":23.84,"x":60.57},{"name":"Body_Bird12","parent":"Body_Bird11","length":25.89,"rotation":-28.42,"x":30.45},{"name":"Hand_Font","parent":"Body_Bird2","length":42.97,"rotation":124.77,"x":45.85,"y":-31.4},{"name":"Hand_Font2","parent":"Hand_Font","length":43.24,"rotation":-14.71,"x":43.16,"y":-0.26},{"name":"Hand_Back","parent":"Body_Bird2","length":31.7,"rotation":133.32,"x":64.67,"y":31.88},{"name":"Rod_Fishing","parent":"Hand_Font2","length":334.11,"rotation":140.03,"x":60.54,"y":-5.77,"transform":"noRotationOrReflection"},{"name":"Rod_Fishing2","parent":"Rod_Fishing","rotation":106.84,"x":335.7,"y":1.16},{"name":"Wire","parent":"Rod_Fishing2","length":220.82,"rotation":-1.97,"x":-3.17,"y":0.68,"scaleX":1.4312},{"name":"Wire2","parent":"Wire","length":220.82,"x":220.82},{"name":"IK_Rod","parent":"All","x":-620.2,"y":-275.31},{"name":"Bobber","parent":"IK_Rod","length":53.72,"rotation":-89.01,"x":1.49,"y":3.69},{"name":"Hand_Font3","parent":"Hand_Font2","length":18.88,"rotation":-18.94,"x":42.7,"y":0.13},{"name":"Hand_Font4","parent":"Hand_Font3","length":28.96,"rotation":-19.65,"x":18.73,"y":0.32},{"name":"Hand_Back2","parent":"Hand_Back","length":30.84,"rotation":-2.28,"x":31.7,"y":0.4},{"name":"Hand_Back3","parent":"Hand_Back2","length":21.58,"rotation":-16.87,"x":30.84},{"name":"Eye_L","parent":"Body_Bird3","rotation":-89.36,"x":51.79,"y":12.32},{"name":"Elip_Eye","parent":"Eye_L","x":-8.11,"y":2.4},{"name":"Neb_Bird","parent":"Body_Bird3","length":14.14,"rotation":117.81,"x":25.29,"y":40.18},{"name":"Neb_Bird2","parent":"Neb_Bird","length":14.33,"rotation":12.54,"x":14.14},{"name":"Eye_L2","parent":"Eye_L","length":16.71,"rotation":94.78,"x":0.44,"y":-9.21},{"name":"Eye_L3","parent":"Eye_L","length":12.92,"rotation":-85.21,"x":0.28,"y":-8.95},{"name":"Eye_Close","parent":"Eye_L2","length":3.66,"rotation":-2.68,"x":-9.39,"y":2.26},{"name":"Eyebrow_T2","parent":"Eye_L","length":33.03,"rotation":-20.45,"x":-6.26,"y":38.72},{"name":"Eyebrow_B","parent":"Eye_L","length":36.8,"rotation":-44.21,"x":-23.35,"y":-21.77},{"name":"Eye_L4","parent":"Body_Bird3","rotation":-101.09,"x":65.69,"y":56.72,"scaleX":-0.677},{"name":"Elip_Eye2","parent":"Eye_L4","x":-8.11,"y":2.4},{"name":"Eye_L5","parent":"Eye_L4","length":16.71,"rotation":94.78,"x":0.46,"y":-9.47},{"name":"Eye_L6","parent":"Eye_L4","length":12.92,"rotation":-85.21,"x":0.28,"y":-8.95},{"name":"Eyebrow_T3","parent":"Eye_L4","length":33.03,"rotation":-1.22,"x":-31.5,"y":32.94,"scaleX":1.3068},{"name":"Eyebrow_B2","parent":"Eye_L4","length":36.8,"rotation":-38.84,"x":-24.38,"y":-25.09},{"name":"Foam","parent":"All","x":-616.88,"y":-318.18},{"name":"Foam_6","parent":"Foam","length":10.45,"rotation":2.86,"x":-20.03,"y":-4.26},{"name":"Foam_7","parent":"Foam","length":12.03,"rotation":104.24,"x":0.12,"y":-13.51},{"name":"Z","parent":"All","x":-27.03,"y":191.19,"scaleX":0.4639,"scaleY":0.4639},{"name":"Z2","parent":"All","x":-27.03,"y":191.19,"scaleX":0.4639,"scaleY":0.4639},{"name":"Z3","parent":"All","x":-27.03,"y":191.19,"scaleX":0.4639,"scaleY":0.4639},{"name":"Fx/Water (1)","parent":"All","rotation":90,"x":-620.35,"y":-337.43},{"name":"Sweat","parent":"Body_Bird3","length":11.06,"rotation":-171.33,"x":36.54,"y":-61.62},{"name":"Foam_8","parent":"Foam","length":12.03,"rotation":104.24,"x":0.12,"y":-13.51},{"name":"Sweat2","parent":"Body_Bird3","length":11.06,"rotation":-171.33,"x":36.54,"y":-61.62},{"name":"Sweat3","parent":"Body_Bird3","length":11.06,"rotation":-171.33,"x":36.54,"y":-61.62},{"name":"Sweat4","parent":"Body_Bird3","length":11.06,"rotation":-171.33,"x":36.54,"y":-61.62},{"name":"Fx/Water_2 (1)","parent":"Foam","x":4.97,"y":-8.71,"scaleX":-0.6,"scaleY":0.6},{"name":"Fx/Water_2 (1)2","parent":"Foam","x":4.97,"y":-8.71,"scaleX":-0.6,"scaleY":0.6},{"name":"Fx/Water_2 (1)3","parent":"Foam","x":4.97,"y":-8.71,"scaleX":-0.6,"scaleY":0.6},{"name":"R","parent":"All","rotation":126.02,"x":28.32,"y":114.26},{"name":"R2","parent":"All","rotation":126.02,"x":28.32,"y":114.26}],"slots":[{"name":"Shadown_Bird","bone":"Body_Bird","attachment":"Shadown_Bird"},{"name":"Hand_Back","bone":"Hand_Back","attachment":"Hand_Back"},{"name":"Body","bone":"Body_Bird","attachment":"Body"},{"name":"Shadown_body","bone":"All","attachment":"Shadown_body"},{"name":"Cliping_Eye","bone":"Body_Bird3","attachment":"Cliping_Eye"},{"name":"Eye2","bone":"Eye_L4","attachment":"Eye"},{"name":"Elip_Eye2","bone":"Elip_Eye2","attachment":"Elip_Eye"},{"name":"Eye_3","bone":"Eye_L4","attachment":"Eye_1"},{"name":"Eye_4","bone":"Eye_L4","attachment":"Eye_2"},{"name":"Eye_Close2","bone":"Eye_L5","attachment":"Eye_Close"},{"name":"Eyebrow_B2","bone":"Eyebrow_B2","attachment":"Eyebrow_B"},{"name":"Eyebrow_T3","bone":"Eyebrow_T3","attachment":"Eyebrow_T2"},{"name":"Line_Body","bone":"Body_Bird3","attachment":"Line_Body"},{"name":"Eye","bone":"Eye_L","attachment":"Eye"},{"name":"Elip_Eye","bone":"Elip_Eye","attachment":"Elip_Eye"},{"name":"Eye_1","bone":"Eye_L","attachment":"Eye_1"},{"name":"Eye_2","bone":"Eye_L","attachment":"Eye_2"},{"name":"Eye_Close","bone":"Eye_Close","attachment":"Eye_Close"},{"name":"Eyebrow_B","bone":"Eyebrow_B","attachment":"Eyebrow_B"},{"name":"Eyebrow_T2","bone":"Eyebrow_T2","attachment":"Eyebrow_T2"},{"name":"Neb_Bird","bone":"Neb_Bird","attachment":"Neb_Bird"},{"name":"Sweat","bone":"Sweat"},{"name":"Sweat2","bone":"Sweat2"},{"name":"Sweat3","bone":"Sweat3"},{"name":"Sweat4","bone":"Sweat4"},{"name":"Fx/Water (1)","bone":"Fx/Water (1)"},{"name":"Fx/Water_2 (1)","bone":"Fx/Water_2 (1)"},{"name":"Fx/Water_2 (1)3","bone":"Fx/Water_2 (1)3"},{"name":"Foam_Blue3","bone":"Foam","attachment":"Foam_Blue3"},{"name":"Foam_Blue2","bone":"Foam","attachment":"Foam_Blue2"},{"name":"Foam_Blue1","bone":"Foam","attachment":"Foam_Blue1"},{"name":"Foam_7","bone":"Foam_7"},{"name":"Foam_8","bone":"Foam_8"},{"name":"Foam_6","bone":"Foam_6"},{"name":"Foam_4","bone":"Foam","attachment":"Foam_4"},{"name":"Foam_2","bone":"Foam","attachment":"Foam_2"},{"name":"Foam_1","bone":"Foam","attachment":"Foam_1"},{"name":"Foam_3","bone":"Foam","attachment":"Foam_1"},{"name":"Fx/Water_2 (1)2","bone":"Fx/Water_2 (1)2"},{"name":"Cliping_Foam","bone":"All","attachment":"Cliping_Foam"},{"name":"Shadow_bobber","bone":"Bobber","attachment":"Shadow_bobber"},{"name":"Bobber","bone":"Bobber","attachment":"Bobber"},{"name":"Wire","bone":"Wire","attachment":"Wire"},{"name":"Rod_Fishing","bone":"Rod_Fishing","attachment":"Rod_Fishing"},{"name":"Hand_Font","bone":"Hand_Font","attachment":"Hand_Font"},{"name":"Z","bone":"Z"},{"name":"Z2","bone":"Z2"},{"name":"Z3","bone":"Z3"},{"name":"R","bone":"R"},{"name":"R2","bone":"R2"}],"ik":[{"name":"IK_Rod","target":"IK_Rod","bendPositive":false,"bones":["Wire","Wire2"]}],"skins":[{"name":"default","attachments":{"Bobber":{"Bobber":{"x":27.69,"y":1.02,"rotation":89.01,"width":43,"height":63}},"Body":{"Body":{"type":"mesh","hull":48,"uvs":[0.32296,0.01429,0.36014,0.03953,0.3951,0.04637,0.57476,0.0477,0.85546,0.23039,0.9308,0.31706,1,0.39948,1,0.65126,1,0.74031,0.90294,0.79321,0.8145,0.8156,0.77381,0.82984,0.6783,0.87969,0.60577,0.92038,0.56332,1,0.30507,1,0.48549,0.89902,0.49434,0.83187,0.50672,0.78406,0.44481,0.76575,0.3316,0.79525,0.30153,0.83086,0.31392,0.85222,0.25908,0.88884,0.05036,0.86036,0.0822,0.79321,0.20178,0.80548,0.20854,0.7966,0.23255,0.73624,0.27146,0.68436,0.28561,0.66299,0.18768,0.52779,0.17882,0.45811,0.13279,0.39224,0.08937,0.21415,0.14,0.1521,0.15577,0.13971,0.14155,0.14648,0.10251,0.16347,0.06663,0.18593,0.03497,0.20535,0,0.19564,0,0.05621,0.02175,0.04423,0.0753,0.02883,0.14521,0.02584,0.15711,0,0.26197,0,0.04629,0.11567,0.10653,0.09128,0.14223,0.08572,0.20545,0.04979,0.21512,0.08701,0.28131,0.09342,0.5068,0.44536,0.55271,0.67724,0.62346,0.71284,0.58101,0.83696,0.53325,0.91936,0.31038,0.75456,0.23962,0.8278],"triangles":[18,19,55,55,19,30,28,29,59,59,29,19,30,19,29,55,30,54,30,31,54,24,26,60,21,60,20,26,27,60,60,27,20,27,59,20,27,28,59,20,59,19,60,23,24,24,25,26,22,60,21,22,23,60,12,57,11,56,11,57,57,17,18,57,18,56,11,56,10,10,56,9,8,9,7,56,18,55,9,56,7,56,55,7,12,13,57,13,58,57,58,16,57,16,17,57,14,15,58,15,16,58,14,58,13,40,41,39,41,48,39,41,42,48,39,48,38,37,38,48,36,37,49,37,48,49,49,50,36,48,42,49,49,42,43,43,44,49,49,44,50,36,52,53,36,50,52,50,51,52,0,53,51,0,51,47,52,51,53,50,45,51,50,44,45,45,46,51,51,46,47,31,32,54,54,33,53,4,54,53,53,1,2,54,32,33,35,53,34,53,35,36,54,4,5,4,53,3,3,53,2,53,33,34,0,1,53,54,6,7,54,5,6,7,55,54],"vertices":[2,4,151.58,-19.37,0.33786,5,-22.7,-20.42,0.66214,2,4,140.76,-23.11,0.58003,5,-28.35,-10.46,0.41997,2,4,136.04,-28.74,0.76629,5,-34.75,-6.85,0.23371,3,3,183.88,-56.13,0.00015,4,122.68,-61.9,0.87908,5,-69.8,0.23,0.12077,3,3,106.19,-89,0.18033,4,43.55,-91.12,0.80753,11,-136.49,-89.33,0.01214,3,3,72.99,-93.68,0.38536,4,10.17,-94.25,0.56121,11,-122.52,-58.85,0.05344,3,3,41.58,-97.67,0.5466,4,-21.4,-96.78,0.32154,11,-108.93,-30.25,0.13186,3,3,-41.02,-69.97,0.44183,4,-102.62,-65.27,0.00237,11,-41.05,24.35,0.5558,2,3,-70.23,-60.18,0.4541,11,-17.04,43.66,0.5459,2,3,-81.45,-36.05,0.2,11,9.33,40.09,0.8,2,12,-18.64,42.37,0.00804,11,26.39,31.23,0.99196,2,12,-11.79,35.83,0.04632,11,35.31,28.01,0.95368,2,12,9.79,21.92,0.5857,11,60.66,24,0.4143,3,13,-8.45,8.63,0.16439,12,27.12,11.61,0.8202,11,80.68,21.58,0.01541,1,13,17.37,21.42,1,1,13,52.67,-15.93,1,2,13,2.62,-13.84,0.43587,12,26.16,-13.42,0.56413,4,12,3.26,-17.72,0.67477,11,70.72,-14.89,0.28861,9,8.71,45.5,0.00505,8,27.24,46.34,0.03156,5,3,-53.38,37.7,0.00263,12,-13.36,-19.61,0.06901,11,56.28,-23.34,0.63303,9,-7.4,41,0.04464,8,13.8,36.39,0.25069,4,12,-16.29,-33.15,0.00204,11,59.06,-36.91,0.25274,9,-8.17,27.17,0.20341,8,18.03,23.19,0.54181,3,11,81.14,-48.07,0.00503,10,-17.16,-15.7,0.05539,9,10.34,10.76,0.93958,2,10,-11.34,-3.3,0.75303,9,24.03,10.32,0.24697,1,10,-13.91,4.06,1,1,10,-3.16,16.88,1,1,10,38.5,7.58,1,2,10,32.47,-15.74,0.99802,9,29.93,-34.85,0.00198,3,10,8.62,-11.81,0.3616,9,24.1,-11.39,0.59977,8,61.94,-1.28,0.03862,3,10,7.32,-14.9,0.12318,9,20.75,-11.41,0.77229,8,58.82,-2.5,0.10453,1,8,40.68,-13.89,1,3,3,-5.79,71.13,0.02808,4,-60.86,74.04,0.00537,8,22.51,-21.11,0.96655,3,3,0.33,66.11,0.08888,4,-54.99,68.74,0.01659,8,15.29,-24.35,0.89453,3,3,50.88,69.71,0.34321,4,-4.32,69.99,0.3375,8,-4.01,-71.21,0.31929,3,3,74.29,63.72,0.20785,4,18.79,62.91,0.64224,8,-19.81,-89.5,0.14991,4,3,112.41,71.92,0.06157,4,57.24,69.34,0.88527,5,47.29,88.53,0.00004,8,-29.45,-127.28,0.05313,4,4,106.4,45.93,0.89496,5,33.25,35.92,0.07905,6,19.72,32.99,0.02575,8,-70.71,-162.81,0.00024,4,4,120.3,31.82,0.59873,5,21.92,19.69,0.25296,6,5.74,18.98,0.1315,7,0.23,20.84,0.01681,4,4,123.16,27.35,0.34316,5,18.04,16.06,0.34185,6,1.28,16.08,0.24582,7,-5.03,20.11,0.06917,4,4,122,30.83,0.20125,5,21.25,17.83,0.21906,6,4.76,17.27,0.36099,7,-1.38,19.71,0.21869,4,4,119.33,40.2,0.03544,5,29.98,22.17,0.02791,6,14.11,20.02,0.25903,7,8.26,18.24,0.67762,4,4,114.66,49.67,0.00363,5,38.44,28.48,0.00011,6,23.53,24.76,0.0505,7,18.8,18.53,0.94577,2,6,31.8,28.81,0.00223,7,28.01,18.7,0.99778,1,7,30.46,11.37,1,4,4,161.3,45.8,0,5,43.14,-18.08,0.05439,6,20.05,-21.91,0.64186,7,-4.13,-22.26,0.30374,4,4,163.6,40.26,0,5,38.12,-21.35,0.07548,6,14.54,-24.26,0.51272,7,-10.12,-22.04,0.41179,3,5,26.66,-24.61,0.23782,6,2.68,-25.47,0.48913,7,-21.37,-18.12,0.27305,3,5,12.8,-23.05,0.6635,6,-10.69,-21.51,0.2325,7,-31.81,-8.86,0.104,3,5,8.81,-31.4,0.77712,6,-16.07,-29.04,0.12688,7,-39.87,-13.4,0.096,3,4,160.58,-9.84,0.16467,5,-11.69,-27.53,0.81797,6,-35.59,-21.65,0.01736,2,6,18.72,0.59,0.05701,7,4.19,-1.31,0.94299,2,5,24.56,-2.22,0.08389,6,4.52,-3.06,0.91611,2,5,17.22,-2.8,0.76696,6,-2.81,-2.34,0.23304,2,5,2.56,-12.68,0.93519,6,-18.97,-9.52,0.06481,2,4,135.89,9.74,0.00461,5,3.05,0.33,0.99539,2,4,129.05,-1.74,0.61417,5,-9.48,4.95,0.38583,3,3,57.73,0.44,0.56939,4,-0.7,0.47,0.43005,8,-69.08,-46.47,0.00056,4,3,-21.24,17.28,0.32574,11,21.74,-39.37,0.27038,9,-44.88,34.29,0.00273,8,-18.81,16.72,0.40115,4,3,-37.4,7.84,0.15108,11,22.52,-20.68,0.68655,9,-39.37,52.17,0.00317,8,-20.05,35.39,0.1592,4,12,0.51,-0.6,0.55883,11,61.28,-0.35,0.43992,9,3.28,61.97,0.00016,8,16.28,59.78,0.00109,2,13,1.2,-2.1,0.57962,12,30.51,-2.42,0.42038,3,11,72.81,-60.18,0.00035,10,-12.75,-29.72,0.00013,9,-0.8,1.17,0.99952,2,9,28.09,-1.36,0.99825,8,62.08,9.51,0.00175]}},"Cliping_Eye":{"Cliping_Eye":{"type":"clipping","end":"Eyebrow_T3","vertexCount":15,"vertices":[1,4,115.52,31.42,1,1,4,105.07,38.32,1,1,4,95.74,43.03,1,1,4,88.09,49.28,1,2,4,74.11,56.67,0.92,3,129.85,60.06,0.08,2,4,56.88,59.64,0.92,3,112.5,62.22,0.08,2,4,40.64,58.94,0.968,3,96.3,60.76,0.032,2,4,26.33,54.2,0.936,3,82.23,55.37,0.064,2,4,8.97,51.75,0.96,3,65,52.11,0.04,2,4,-6.52,54.69,0.584,3,49.39,54.33,0.416,1,3,16.41,8.64,1,1,3,14.73,-72.47,1,1,4,111.57,-88.31,1,1,4,184.19,-23.33,1,1,4,123.32,23.59,1]}},"Cliping_Foam":{"Cliping_Foam":{"type":"clipping","end":"Wire","vertexCount":10,"vertices":[-656.57,-335.46,-655.15,-340.21,-652.46,-343.9,-647.27,-344.92,-602.79,-347.64,-222.08,-363.67,94.94,-45.29,-346.95,392.43,-664.08,-95.4,-724.39,-311.53]}},"Elip_Eye":{"Elip_Eye":{"x":0.23,"y":-0.1,"rotation":-24.46,"width":14,"height":14}},"Elip_Eye2":{"Elip_Eye":{"x":0.23,"y":-0.1,"rotation":-24.46,"width":14,"height":14}},"Eye":{"Eye":{"x":1.52,"y":-3.23,"scaleX":0.96,"scaleY":0.96,"rotation":-24.46,"width":52,"height":64}},"Eye2":{"Eye":{"x":1.52,"y":-3.23,"scaleX":0.96,"scaleY":0.96,"rotation":-24.46,"width":52,"height":64}},"Eye_1":{"Eye_1":{"type":"mesh","hull":18,"uvs":[0.69163,0.06617,0.81116,0.13684,0.92167,0.24284,1,0.40097,0.92802,0.53038,0.85126,0.63564,0.74641,0.76505,0.58539,0.86513,0.41313,0.94277,0.20321,1,0.12151,0.89629,0.0624,0.7957,0,0.67307,0,0.51719,0,0.35299,0,0.20542,0.21351,0,0.55631,0],"triangles":[5,0,1,16,17,14,6,17,0,17,13,14,11,12,13,13,17,11,8,10,11,9,10,8,14,15,16,11,17,7,4,1,2,4,2,3,4,5,1,5,6,0,6,7,17,7,8,11],"vertices":[2,31,28.14,-19.78,0.14007,27,19.17,19.63,0.85993,2,31,22.4,-23.19,0.28342,27,22.79,14.02,0.71658,2,31,15.24,-25.42,0.44203,27,25.28,6.95,0.55797,2,31,6.38,-25.1,0.58167,27,25.29,-1.91,0.41833,2,31,1.99,-19.13,0.72926,27,19.48,-6.52,0.27074,2,31,-1.2,-13.5,0.8361,27,13.97,-9.91,0.1639,2,31,-4.9,-6.14,0.91468,27,6.75,-13.88,0.08532,2,31,-6.08,2.91,0.86237,27,-2.25,-15.39,0.13763,2,31,-6,11.92,0.70511,27,-11.26,-15.64,0.29489,2,31,-4.2,22.05,0.28646,27,-21.45,-14.21,0.71354,2,31,2.25,23.12,0.2731,27,-22.75,-7.81,0.7269,2,31,8.08,23.31,0.27151,27,-23.16,-1.99,0.72849,2,31,14.99,23.14,0.2,27,-23.24,4.92,0.8,2,31,22.1,19.59,0.16,27,-19.94,12.15,0.84,2,31,29.59,15.84,0.04,27,-16.48,19.78,0.96,1,27,-13.36,26.63,1,1,27,0.11,32.01,1,2,31,34,-15.6,0.04,27,14.78,25.34,0.96]}},"Eye_2":{"Eye_2":{"type":"mesh","hull":17,"uvs":[0.9502,0.14469,1,0.29386,1,0.46243,1,0.6589,1,0.80843,0.73622,1,0.5225,1,0.32328,0.93675,0.14942,0.84311,0.0458,0.73652,0,0.61524,0.08887,0.50091,0.24087,0.37114,0.39793,0.24866,0.56387,0.13708,0.71206,0.05098,0.85266,0],"triangles":[1,14,0,2,13,1,9,10,11,3,13,2,8,11,12,9,11,8,15,16,0,6,7,12,8,12,7,14,15,0,1,13,14,12,13,6,13,3,6,3,5,6,4,5,3],"vertices":[2,27,26.54,-6.04,0.92,32,-0.71,26.42,0.08,1,27,25.68,-13.35,1,1,27,22.4,-20.56,1,1,27,18.58,-28.97,1,1,27,15.67,-35.36,1,1,27,1.13,-38.64,1,1,27,-7.62,-34.66,1,1,27,-14.55,-28.24,1,2,27,-19.85,-21,0.94753,32,10.32,-21.06,0.05247,2,27,-22.02,-14.51,0.88,32,3.67,-22.68,0.12,2,27,-21.53,-8.46,0.86757,32,-2.31,-21.7,0.13243,2,27,-15.67,-5.23,0.84,32,-5.04,-15.58,0.16,2,27,-6.92,-2.51,0.84,32,-7.02,-6.63,0.16,2,27,1.9,-0.2,0.84,32,-8.59,2.35,0.16,2,27,10.87,1.49,0.84,32,-9.52,11.43,0.16,2,27,18.61,2.41,0.84,32,-9.79,19.22,0.16,2,27,25.37,1.97,0.84,32,-8.79,25.91,0.16]}},"Eye_3":{"Eye_1":{"type":"mesh","hull":18,"uvs":[0.69163,0.06617,0.81116,0.13684,0.92167,0.24284,1,0.40097,0.92802,0.53038,0.85126,0.63564,0.74641,0.76505,0.58539,0.86513,0.41313,0.94277,0.20321,1,0.12151,0.89629,0.0624,0.7957,0,0.67307,0,0.51719,0,0.35299,0,0.20542,0.21351,0,0.55631,0],"triangles":[4,1,2,11,17,7,14,15,16,9,10,8,8,10,11,13,17,11,11,12,13,17,13,14,6,17,0,16,17,14,5,0,1,7,8,11,6,7,17,5,6,0,4,5,1,4,2,3],"vertices":[2,38,28.14,-19.78,0.14007,36,19.17,19.63,0.85993,2,38,22.4,-23.19,0.28342,36,22.79,14.02,0.71658,2,38,15.24,-25.42,0.44203,36,25.28,6.95,0.55797,2,38,6.38,-25.1,0.58167,36,25.29,-1.91,0.41833,2,38,1.99,-19.13,0.72926,36,19.48,-6.52,0.27074,2,38,-1.2,-13.5,0.8361,36,13.97,-9.91,0.1639,2,38,-4.9,-6.14,0.91468,36,6.75,-13.88,0.08532,2,38,-6.08,2.91,0.92638,36,-2.25,-15.39,0.07362,2,38,-6,11.92,0.70511,36,-11.26,-15.64,0.29489,2,38,-4.2,22.05,0.28646,36,-21.45,-14.21,0.71354,2,38,2.25,23.12,0.2731,36,-22.75,-7.81,0.7269,2,38,8.08,23.31,0.27151,36,-23.16,-1.99,0.72849,2,38,14.99,23.14,0.2,36,-23.24,4.92,0.8,2,38,22.1,19.59,0.16,36,-19.94,12.15,0.84,2,38,29.59,15.84,0.04,36,-16.48,19.78,0.96,1,36,-13.36,26.63,1,1,36,0.11,32.01,1,2,38,34,-15.6,0.04,36,14.78,25.34,0.96]}},"Eye_4":{"Eye_2":{"type":"mesh","hull":17,"uvs":[0.9502,0.14469,1,0.29386,1,0.46243,1,0.6589,1,0.80843,0.73622,1,0.5225,1,0.32328,0.93675,0.14942,0.84311,0.0458,0.73652,0,0.61524,0.08887,0.50091,0.24087,0.37114,0.39793,0.24866,0.56387,0.13708,0.71206,0.05098,0.85266,0],"triangles":[1,14,0,2,13,1,9,10,11,3,13,2,8,11,12,9,11,8,15,16,0,6,7,12,8,12,7,14,15,0,1,13,14,12,13,6,13,3,6,3,5,6,4,5,3],"vertices":[2,36,26.54,-6.04,0.92,39,-0.71,26.42,0.08,1,36,25.68,-13.35,1,1,36,22.4,-20.56,1,1,36,18.58,-28.97,1,1,36,15.67,-35.36,1,1,36,1.13,-38.64,1,1,36,-7.62,-34.66,1,1,36,-14.55,-28.24,1,2,36,-19.85,-21,0.94753,39,10.32,-21.06,0.05247,2,36,-22.02,-14.51,0.88,39,3.67,-22.68,0.12,2,36,-21.53,-8.46,0.86757,39,-2.31,-21.7,0.13243,2,36,-15.67,-5.23,0.84,39,-5.04,-15.58,0.16,2,36,-6.92,-2.51,0.84,39,-7.02,-6.63,0.16,2,36,1.9,-0.2,0.84,39,-8.59,2.35,0.16,2,36,10.87,1.49,0.84,39,-9.52,11.43,0.16,2,36,18.61,2.41,0.84,39,-9.79,19.22,0.16,2,36,25.37,1.97,0.84,39,-8.79,25.91,0.16]}},"Eye_Close":{"Eye_Close":{"x":6.09,"y":2.07,"rotation":-116.56,"width":42,"height":15}},"Eye_Close2":{"Eye_Close":{"type":"mesh","hull":13,"uvs":[1,0.29643,0.89465,0.70923,0.6878,1,0.40209,1,0.15703,0.89803,0,0.69643,0,0.34419,0.20211,0.48179,0.39182,0.51699,0.62267,0.47539,0.81696,0.31539,0.95522,0,1,0],"triangles":[5,6,7,11,12,0,10,11,0,4,5,7,7,8,3,3,8,9,3,9,2,2,9,10,4,7,3,2,10,1,1,10,0],"vertices":[2,38,3.14,-23.04,0.68,36,23.16,-4.42,0.32,2,38,-2.87,-18.37,0.89753,36,19,-10.79,0.10247,1,38,-6.87,-9.51,1,2,38,-6.37,2.48,0.89638,36,-1.48,-16.03,0.10362,2,38,-4.42,12.7,0.64568,36,-11.83,-14.93,0.35432,2,38,-1.13,19.17,0.29917,36,-18.55,-12.19,0.70083,2,38,4.15,18.95,0.23506,36,-18.77,-6.91,0.76494,2,38,1.74,10.55,0.61334,36,-10.2,-8.61,0.38666,2,38,0.88,2.61,0.776,36,-2.22,-8.81,0.224,2,38,1.11,-7.1,0.84414,36,7.44,-7.77,0.15586,2,38,3.17,-15.35,0.78947,36,15.49,-5.03,0.21053,2,38,7.66,-21.35,0.632,36,21.1,-0.06,0.368,2,38,7.58,-23.23,0.60397,36,22.97,0.02,0.39603]}},"Eyebrow_B":{"Eyebrow_B":{"x":20.25,"y":-0.02,"rotation":19.75,"width":44,"height":21}},"Eyebrow_B2":{"Eyebrow_B":{"x":20.63,"y":3.71,"rotation":29.63,"width":44,"height":21}},"Eyebrow_T2":{"Eyebrow_T2":{"x":17.04,"y":0.99,"rotation":6.26,"width":37,"height":19}},"Eyebrow_T3":{"Eyebrow_T2":{"x":17.04,"y":0.99,"rotation":6.26,"width":37,"height":19}},"Foam_1":{"Foam_1":{"type":"mesh","hull":6,"uvs":[1,0.36728,1,1,0.50606,1,0,0.51199,0,0,0.59353,0],"triangles":[3,4,5,3,5,0,2,3,0,2,0,1],"vertices":[12.28,-1.19,22.41,-17.67,10.3,-15.82,-4.37,-5.28,-7.4,2.88,0.94,5.98]}},"Foam_2":{"Foam_2":{"type":"mesh","hull":9,"uvs":[0.70259,0.12722,1,0.36282,1,1,0.77693,1,0.50433,0.76561,0.18711,0.82641,0,0.53002,0,0,0.28624,0],"triangles":[6,7,8,4,8,0,4,0,1,5,6,8,4,5,8,3,4,1,3,1,2],"vertices":[20.31,7.37,32.47,1.08,32.47,-15.91,23.35,-15.91,12.2,-9.66,-0.77,-11.28,-8.42,-3.38,-8.42,10.76,3.29,10.76]}},"Foam_3":{"Foam_1":{"type":"mesh","hull":4,"uvs":[1,1,0,1,0,0,1,0],"triangles":[1,2,3,1,3,0],"vertices":[28.89,-11.37,14.83,-16.59,8.92,-0.65,22.98,4.57]}},"Foam_4":{"Foam_4":{"type":"mesh","hull":4,"uvs":[1,1,0,1,0,0,1,0],"triangles":[1,2,3,1,3,0],"vertices":[32.51,-26.48,-24.25,-26.48,-24.25,15.35,32.51,15.35]}},"Foam_6":{"Foam_6":{"x":5.93,"y":0.77,"rotation":63.65,"width":21,"height":15}},"Foam_7":{"Foam_7":{"x":6.32,"y":0.35,"rotation":63.24,"width":26,"height":14}},"Foam_8":{"Foam_7":{"x":6.32,"y":0.35,"rotation":63.24,"width":26,"height":14}},"Foam_Blue1":{"Foam_Blue1":{"type":"mesh","hull":6,"uvs":[1,0.56271,1,1,0.84669,1,0,0.39547,0,0,0.32769,0],"triangles":[3,4,5,3,5,0,2,3,0,2,0,1],"vertices":[56.61,-26.41,56.61,-41.58,52.35,-41.58,28.84,-20.6,28.84,-6.88,37.94,-6.88]}},"Foam_Blue2":{"Foam_Blue2":{"type":"mesh","hull":8,"uvs":[0.83934,0.55457,1,0.73094,1,1,0.78954,0.90009,0.41781,0.86826,0,0.60388,0,0,0.52868,0],"triangles":[5,6,7,4,5,7,4,7,0,3,4,0,3,0,1,3,1,2],"vertices":[46.43,-16.19,56.6,-23.85,56.6,-35.52,43.27,-31.19,19.74,-29.81,-6.7,-18.33,-6.7,7.88,26.76,7.88]}},"Foam_Blue3":{"Foam_Blue3":{"type":"mesh","hull":6,"uvs":[1,0.70205,1,1,0.58424,1,0,0.5113,0,0,0.33108,0],"triangles":[3,4,5,2,5,0,3,5,2,2,0,1],"vertices":[16.2,-18.24,13.52,-24.87,1.57,-20.04,-10.83,-2.38,-6.23,8.99,3.28,5.15]}},"Fx/Water (1)":{"Fx/Water (1)":{"x":75.42,"y":-0.41,"width":196,"height":201},"Fx/Water (2)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (3)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (4)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (5)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (6)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (7)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (8)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (9)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (10)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (11)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (12)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (13)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (14)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (15)":{"x":75.86,"y":0.09,"width":196,"height":201},"Fx/Water (16)":{"x":75.86,"y":0.09,"width":196,"height":201}},"Fx/Water_2 (1)":{"Fx/Water_2 (1)":{"x":-399.54,"y":-486.65,"width":144,"height":138},"Fx/Water_2 (2)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (3)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (4)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (5)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (6)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (7)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (8)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (9)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (10)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (11)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (12)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (13)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (14)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (15)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (16)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (17)":{"x":22.54,"y":63.19,"width":144,"height":138}},"Fx/Water_2 (1)2":{"Fx/Water_2 (1)":{"x":-370.12,"y":-486.65,"width":144,"height":138},"Fx/Water_2 (2)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (3)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (4)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (5)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (6)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (7)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (8)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (9)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (10)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (11)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (12)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (13)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (14)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (15)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (16)":{"x":51.96,"y":63.19,"width":144,"height":138},"Fx/Water_2 (17)":{"x":51.96,"y":63.19,"width":144,"height":138}},"Fx/Water_2 (1)3":{"Fx/Water_2 (1)":{"x":-399.54,"y":-486.65,"width":144,"height":138},"Fx/Water_2 (2)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (3)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (4)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (5)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (6)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (7)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (8)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (9)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (10)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (11)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (12)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (13)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (14)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (15)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (16)":{"x":22.54,"y":63.19,"width":144,"height":138},"Fx/Water_2 (17)":{"x":22.54,"y":63.19,"width":144,"height":138}},"Hand_Back":{"Hand_Back":{"type":"mesh","hull":14,"uvs":[1,0.15491,1,0.40718,1,0.66353,0.87902,0.8446,0.7073,0.96259,0.39822,1,0,0.84256,0,0.59639,0.03899,0.56743,0.12875,0.50077,0.32425,0.29529,0.46162,0.11829,0.5303,0,1,0],"triangles":[6,8,5,8,9,5,5,9,4,6,7,8,4,9,3,3,9,2,2,9,10,10,1,2,10,11,1,1,11,0,11,12,0,12,13,0],"vertices":[2,16,6.7,12.84,0.8805,25,-25.47,11.44,0.1195,2,16,26.05,23.19,0.08159,25,-6.55,22.55,0.91841,2,25,12.69,33.85,0.99999,26,-27.2,27.12,0.00001,2,25,30.38,34.83,0.94239,26,-10.56,33.2,0.05761,2,25,45.05,30.11,0.72633,26,4.86,32.94,0.27367,2,25,58.34,13.9,0.24298,26,22.29,21.28,0.75702,1,26,32.6,-6.88,1,3,16,72.17,-28.12,0.01379,25,41.57,-26.89,0.05566,26,18.07,-22.62,0.93055,3,16,68.72,-27.01,0.02198,25,38.08,-25.91,0.08778,26,14.44,-22.7,0.89024,3,16,60.76,-24.44,0.07643,25,30.03,-23.66,0.25811,26,6.09,-22.88,0.66547,3,16,38.82,-21.32,0.64934,25,7.98,-21.42,0.2903,26,-15.66,-27.13,0.06036,3,16,20.9,-20.47,0.99874,25,-9.96,-21.28,0.00124,26,-32.87,-32.2,0.00001,1,16,9.66,-21.26,1,2,16,-5.18,6.49,0.99965,25,-37.09,4.62,0.00035]}},"Hand_Font":{"Hand_Font":{"type":"mesh","hull":16,"uvs":[1,0.29524,0.95493,0.38449,0.83734,0.65767,0.58351,0.9218,0.38942,0.97567,0.21414,1,0.08917,1,0,1,0,0.53773,0.09472,0.49311,0.18823,0.44907,0.29286,0.39979,0.52227,0.21409,0.6554,0.06804,0.71087,0,1,0],"triangles":[6,7,8,5,9,10,9,6,8,9,5,6,10,4,5,11,12,3,4,11,3,10,11,4,14,15,0,0,13,14,1,13,0,1,12,13,2,12,1,3,12,2],"vertices":[2,14,6.97,25.39,0.99982,23,-84.68,-12.69,0.00018,2,14,17.94,26.36,0.99611,23,-76.1,-5.8,0.00389,4,14,49.93,31.43,0.86363,15,-1.5,32.38,0.02324,23,-52.28,16.15,0.11269,24,-72.19,-8.98,0.00043,4,14,91.58,21.96,0.11193,15,41.19,33.79,0.31743,23,-12.35,31.34,0.38819,24,-39.7,18.76,0.18245,4,14,110.96,5.42,0.00644,15,64.14,22.71,0.39939,23,12.95,28.31,0.01985,24,-14.85,24.41,0.57432,2,15,83.27,10.71,0.12746,24,7.58,26.97,0.87254,2,15,95.77,0.73,0.02157,24,23.58,26.97,0.97843,2,15,104.69,-6.39,0.00314,24,34.99,26.97,0.99686,3,15,74.41,-44.32,0.00656,23,44.42,-31.76,0.21354,24,34.99,-21.57,0.7799,3,15,62.02,-40.42,0.05367,23,31.43,-32.09,0.40255,24,22.87,-26.26,0.54378,3,15,49.78,-36.57,0.2123,23,18.6,-32.42,0.59098,24,10.9,-30.88,0.19672,3,15,36.08,-32.26,0.56506,23,4.25,-32.79,0.41806,24,-2.49,-36.06,0.01687,3,14,36.68,-28.73,0.32864,15,0.97,-29.18,0.66667,23,-29.96,-41.28,0.00469,2,14,14.2,-24.23,0.88623,15,-21.92,-30.54,0.11377,2,14,4.23,-22.81,0.96379,15,-31.92,-31.7,0.03621,1,14,-17.88,6.86,1]}},"Line_Body":{"Line_Body":{"type":"mesh","hull":10,"uvs":[0.30485,0.2067,0.20345,0.45921,0.89893,0.80977,1,1,0.86383,1,0.59473,0.84943,0,0.57313,0,0.20762,0,0,0.26585,0],"triangles":[4,2,3,4,5,2,7,8,9,7,9,0,1,7,0,1,6,7,6,1,2,5,6,2],"vertices":[1,4,93.56,39.81,1,2,4,67.25,54.36,0.968,3,123.09,57.43,0.032,2,4,18.7,46.52,0.96,3,74.97,47.34,0.04,2,4,-6.62,53.82,0.816,3,49.34,53.46,0.184,2,4,-3.16,59.23,0.776,3,52.54,59.02,0.224,2,4,18.7,60.03,0.96,3,74.34,60.84,0.04,1,4,57.66,66.81,1,1,4,97.87,51.21,1,1,4,118.55,37.54,1,1,4,112.05,29.38,1]}},"Neb_Bird":{"Neb_Bird":{"type":"mesh","hull":10,"uvs":[1,0.48614,0.58768,0.6975,0.27568,0.87363,0.13968,1,0,1,0,0.74356,0.07568,0.39672,0.21168,0.21518,0.41168,0,1,0],"triangles":[2,3,5,3,4,5,2,5,1,5,6,1,6,7,1,1,7,0,7,8,0,8,9,0],"vertices":[1,29,5.85,9.81,1,2,29,16.47,7.57,0.2298,30,3.92,6.89,0.7702,1,30,11.84,3.73,1,1,30,16.64,3.08,1,1,30,18.04,0.5,1,1,30,11.05,-3.29,1,2,29,16.48,-6.66,0.43371,30,0.84,-7.01,0.56629,2,29,10.36,-8.19,0.96638,30,-5.47,-7.18,0.03362,1,29,2.57,-9.4,1,1,29,-5.53,-0.07,1]}},"R":{"R":{"x":2.98,"y":3.45,"width":44,"height":51}},"R2":{"R":{"x":2.98,"y":3.45,"width":44,"height":51}},"Rod_Fishing":{"Rod_Fishing":{"x":168.4,"y":-3.56,"rotation":-89.69,"width":28,"height":343}},"Shadow_bobber":{"Shadow_bobber":{"x":47.24,"y":30.65,"rotation":89.01,"width":64,"height":28}},"Shadown_Bird":{"Shadown_Bird":{"x":68.49,"y":-28.23,"width":263,"height":163}},"Shadown_body":{"Shadown_body":{"color":"ffffffb9","x":-3.08,"y":11.84,"width":139,"height":139}},"Sweat":{"Sweat":{"x":5.33,"y":0.09,"rotation":60.12,"width":12,"height":15}},"Sweat2":{"Sweat":{"x":5.33,"y":0.09,"rotation":60.12,"width":12,"height":15}},"Sweat3":{"Sweat":{"x":5.33,"y":0.09,"rotation":60.12,"width":12,"height":15}},"Sweat4":{"Sweat":{"x":5.33,"y":0.09,"rotation":60.12,"width":12,"height":15}},"Wire":{"Wire":{"type":"mesh","hull":22,"uvs":[1,1,0.9,1,0.8,1,0.7,1,0.6,1,0.5,1,0.4,1,0.3,1,0.2,1,0.1,1,0,1,0,0,0.1,0,0.2,0,0.3,0,0.4,0,0.5,0,0.6,0,0.7,0,0.8,0,0.9,0,1,0],"triangles":[9,10,12,10,11,12,5,6,16,6,15,16,6,7,15,7,14,15,7,8,14,8,13,14,8,9,13,9,12,13,0,1,21,1,20,21,1,2,20,2,19,20,2,3,19,3,18,19,3,4,18,4,17,18,4,5,17,5,16,17],"vertices":[1,19,-0.51,3.75,1,2,19,43.69,3.6,0.9,20,-177.13,3.6,0.1,2,19,87.89,3.45,0.8,20,-132.93,3.45,0.2,2,19,132.09,3.31,0.7,20,-88.73,3.31,0.3,2,19,176.29,3.16,0.6,20,-44.53,3.16,0.4,3,19,220.49,3.01,0.54394,20,-0.33,3.01,0.44806,22,-182.12,212.41,0.008,3,19,264.69,2.86,0.3904,20,43.87,2.86,0.5856,22,-135.46,178.37,0.024,3,19,308.89,2.71,0.276,20,88.07,2.71,0.644,22,-93.39,140.11,0.08,3,19,353.09,2.56,0.1744,20,132.27,2.56,0.6976,22,-55.78,97.56,0.128,3,19,397.29,2.42,0.0784,20,176.47,2.42,0.7056,22,-22.64,50.72,0.216,1,22,6.04,-0.41,1,1,22,-0.59,-3.04,1,3,19,397.27,-3.58,0.0784,20,176.45,-3.58,0.7056,22,-28.8,47.78,0.216,3,19,353.07,-3.44,0.1744,20,132.25,-3.44,0.6976,22,-61.48,94.32,0.128,3,19,308.87,-3.29,0.276,20,88.05,-3.29,0.644,22,-98.63,136.57,0.08,3,19,264.67,-3.14,0.3904,20,43.85,-3.14,0.5856,22,-140.24,174.53,0.024,3,19,220.47,-2.99,0.5155,20,-0.35,-2.99,0.4765,22,-186.27,208.16,0.008,2,19,176.27,-2.84,0.6,20,-44.55,-2.84,0.4,2,19,132.07,-2.69,0.7,20,-88.75,-2.69,0.3,2,19,87.87,-2.55,0.8,20,-132.95,-2.55,0.2,2,19,43.67,-2.4,0.9,20,-177.15,-2.4,0.1,1,19,-0.53,-2.25,1]}},"Z":{"Z":{"x":0.41,"y":0.72,"width":38,"height":43}},"Z2":{"Z":{"x":0.41,"y":0.72,"width":38,"height":43}},"Z3":{"Z":{"x":0.41,"y":0.72,"width":38,"height":43}}}}],"animations":{"Angry":{"slots":{"Cliping_Foam":{"attachment":[{"name":null}]},"Foam_1":{"attachment":[{"name":null}]},"Foam_2":{"attachment":[{"name":null}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_4":{"attachment":[{"name":null}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"attachment":[{"name":null}]},"Foam_Blue3":{"attachment":[{"name":null}]},"R":{"attachment":[{"name":"R"}]},"R2":{"attachment":[{"name":"R"}]},"Shadow_bobber":{"attachment":[{"name":null}]}},"bones":{"Eye_Close":{"rotate":[{"angle":1.03}],"translate":[{"x":8.44,"y":-2.73}],"scale":[{"x":-0.948,"y":1.39}]},"Body_Bird3":{"rotate":[{"angle":0.29,"curve":0.25,"c3":0.75},{"time":0.2,"angle":3.45},{"time":0.6667,"angle":-0.71},{"time":1,"angle":0.29}]},"Body_Bird5":{"rotate":[{"angle":3.56,"curve":0.495,"c2":0.58,"c3":0.633},{"time":0.1667,"angle":18.66,"curve":0.25,"c3":0.75},{"time":0.6333,"angle":-13.15,"curve":0.244,"c3":0.7,"c4":0.79},{"time":1,"angle":3.56}]},"Eyebrow_T3":{"rotate":[{"angle":53.4,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":61.88},{"time":1,"angle":53.4}],"translate":[{"x":6.63,"y":-24.31,"curve":0.25,"c3":0.75},{"time":0.4333,"x":6.24,"y":-28.73},{"time":1,"x":6.63,"y":-24.31}]},"IK_Rod":{"translate":[{"x":539.7,"y":338.39,"curve":0.25,"c3":0.75},{"time":0.5,"x":539.7,"y":351.75},{"time":1,"x":539.7,"y":338.39}]},"Eyebrow_T2":{"rotate":[{"angle":52.56,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":57.39},{"time":1,"angle":52.56}],"translate":[{"x":-13.84,"y":-18.62,"curve":0.25,"c3":0.75},{"time":0.4333,"x":-14.48,"y":-23},{"time":1,"x":-13.84,"y":-18.62}]},"Eyebrow_B":{"rotate":[{},{"time":0.4333,"angle":-7.59},{"time":1}],"translate":[{},{"time":0.4333,"x":-1.17,"y":8.4},{"time":1}]},"Body_Bird2":{"rotate":[{"angle":-10.4,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-13.99},{"time":1,"angle":-10.4}],"translate":[{},{"time":0.4,"x":-0.72,"y":9.19},{"time":1}]},"Rod_Fishing":{"rotate":[{"angle":0.68}]},"Hand_Font":{"rotate":[{"angle":49.31,"curve":0.25,"c3":0.75},{"time":0.4667,"angle":55.36},{"time":1,"angle":49.31}]},"Hand_Back":{"rotate":[{"angle":-3.71}]},"Eye_L5":{"translate":[{"x":-1.97,"y":23.56},{"time":0.3333,"x":-2.45,"y":29.24},{"time":1,"x":-1.97,"y":23.56}]},"Hand_Font2":{"rotate":[{"angle":-28.61}]},"Wire":{"scale":[{"x":0.315}]},"Elip_Eye":{"rotate":[{"angle":42.92}],"translate":[{"x":-2.12,"y":-8.54}],"scale":[{"x":1.04,"y":0.726},{"time":0.5,"x":1.177,"y":0.621},{"time":1,"x":1.04,"y":0.726}]},"Wire2":{"scale":[{"x":0.527}]},"Elip_Eye2":{"rotate":[{"angle":34.43}],"translate":[{"x":-1.67,"y":-10.05}],"scale":[{"x":1.236,"y":0.634},{"time":0.5,"x":1.556,"y":0.645},{"time":1,"x":1.236,"y":0.634}]},"Body_Bird8":{"rotate":[{"angle":12.95}]},"Body_Bird7":{"rotate":[{"angle":6.32}]},"Body_Bird9":{"rotate":[{"angle":-5.49}]},"Body_Bird4":{"rotate":[{"angle":4.36,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":-17.5,"curve":0.25,"c3":0.75},{"time":1,"angle":4.36}]},"Body_Bird6":{"rotate":[{"angle":3.98,"curve":0.495,"c2":0.58,"c3":0.633},{"time":0.2333,"angle":19.09,"curve":0.25,"c3":0.75},{"time":0.7,"angle":-12.72,"curve":0.244,"c3":0.7,"c4":0.79},{"time":1,"angle":3.98}]},"Eye_L3":{"rotate":[{"angle":-54.41}],"translate":[{"x":6.79,"y":-80.97}]},"Eye_L2":{"rotate":[{"angle":20.24}],"translate":[{"x":-1.86,"y":22.25},{"time":0.3667,"x":-2.72,"y":24.09},{"time":1,"x":-1.86,"y":22.25}]},"Eye_L6":{"rotate":[{"angle":-54.82}],"translate":[{"x":27.1,"y":-95.74}]},"Neb_Bird2":{"rotate":[{"angle":30.54}]},"Neb_Bird":{"rotate":[{"angle":-16.1},{"time":0.4,"angle":-27.04},{"time":1,"angle":-16.1}]},"R":{"rotate":[{"angle":-68.85}],"translate":[{"x":-124.89,"y":33.52},{"time":0.1,"x":-133.27,"y":38.93},{"time":0.2,"x":-124.89,"y":33.52},{"time":0.3,"x":-133.27,"y":38.93},{"time":0.4,"x":-124.89,"y":33.52},{"time":0.5,"x":-133.27,"y":38.93},{"time":0.6,"x":-124.89,"y":33.52},{"time":0.7,"x":-133.27,"y":38.93},{"time":0.8,"x":-124.89,"y":33.52},{"time":0.9,"x":-133.27,"y":38.93},{"time":1,"x":-124.89,"y":33.52}],"scale":[{},{"time":0.1,"y":1.331},{"time":0.2},{"time":0.3,"y":1.331},{"time":0.4},{"time":0.5,"y":1.331},{"time":0.6},{"time":0.7,"y":1.331},{"time":0.8},{"time":0.9,"y":1.331},{"time":1}]},"R2":{"rotate":[{"angle":-32.38}],"translate":[{"x":-124.16,"y":5.71},{"time":0.1,"x":-117.24,"y":6.15},{"time":0.2,"x":-124.16,"y":5.71},{"time":0.3,"x":-117.24,"y":6.15},{"time":0.4,"x":-124.16,"y":5.71},{"time":0.5,"x":-117.24,"y":6.15},{"time":0.6,"x":-124.16,"y":5.71},{"time":0.7,"x":-117.24,"y":6.15},{"time":0.8,"x":-124.16,"y":5.71},{"time":0.9,"x":-117.24,"y":6.15},{"time":1,"x":-124.16,"y":5.71}],"scale":[{"x":0.719,"y":0.719},{"time":0.1,"x":0.627,"y":0.875},{"time":0.2,"x":0.719,"y":0.719},{"time":0.3,"x":0.627,"y":0.875},{"time":0.4,"x":0.719,"y":0.719},{"time":0.5,"x":0.627,"y":0.875},{"time":0.6,"x":0.719,"y":0.719},{"time":0.7,"x":0.627,"y":0.875},{"time":0.8,"x":0.719,"y":0.719},{"time":0.9,"x":0.627,"y":0.875},{"time":1,"x":0.719,"y":0.719}]}},"deform":{"default":{"Eye_1":{"Eye_1":[{"offset":12,"vertices":[2.43031,-0.15855,-0.88443,2.26918,3.23582,-0.47863,-0.93511,3.13453,3.42474,-0.49984,-0.99578,3.31469,3.84493,-0.16456,-1.47732,3.55363,3.70995,-0.68495,-0.9487,3.65137,1.41742,0.43913,-0.99752,1.09863]}]},"Line_Body":{"Line_Body":[{"offset":6,"vertices":[-2.46524,1.65549,-2.54728,1.52624,3.73698,3.03474,3.57558,3.22332,0.03466,4.17962,-0.18081,4.17585,-0.3203,2.71895,-0.46003,2.69882]}]}}}},"Eat_Fake":{"slots":{"Shadow_bobber":{"color":[{"color":"ffffffff"},{"time":0.1667,"color":"ffffff39"},{"time":0.5333,"color":"ffffffff"}]}},"bones":{"IK_Rod":{"translate":[{},{"time":0.2667,"x":6.16,"y":-21.97},{"time":0.5333}]},"Bobber":{"rotate":[{},{"time":0.2667,"angle":-10.5},{"time":0.5333}],"scale":[{},{"time":0.2667,"x":0.896},{"time":0.5333}]}},"deform":{"default":{"Cliping_Foam":{"Cliping_Foam":[{"vertices":[-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194,7.40186,22.56592,7.40186,22.56592,-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194]}]}}}},"Eat_Real":{"slots":{"Shadow_bobber":{"color":[{"color":"ffffffff"},{"time":0.1667,"color":"ffffff39"},{"time":0.5333,"color":"ffffffff"}]}},"bones":{"IK_Rod":{"rotate":[{"angle":52.42}],"translate":[{"y":-58.34},{"time":0.2333,"x":-34.51,"y":-116.2},{"time":0.5333,"y":-58.34}]},"Bobber":{"rotate":[{},{"time":0.2667,"angle":-10.5},{"time":0.5333}],"scale":[{},{"time":0.2667,"x":0.896},{"time":0.5333}]},"Rod_Fishing":{"rotate":[{"angle":-3.09},{"time":0.2667,"angle":0.59},{"time":0.5333,"angle":-3.09}]}},"deform":{"default":{"Cliping_Foam":{"Cliping_Foam":[{"vertices":[-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194,7.40186,22.56592,7.40186,22.56592,-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194,-2.01599,27.55194]}]}}}},"Fishing":{"slots":{"Foam_2":{"color":[{"color":"ffffffff"},{"time":0.376,"color":"ffffff00"}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"color":[{"color":"ffffffff"},{"time":0.376,"color":"ffffff00"}]},"Foam_Blue3":{"attachment":[{"name":null}]},"Fx/Water (1)":{"attachment":[{"time":0.0836,"name":"Fx/Water (1)"},{"time":0.1253,"name":"Fx/Water (2)"},{"time":0.1671,"name":"Fx/Water (3)"},{"time":0.2089,"name":"Fx/Water (4)"},{"time":0.2507,"name":"Fx/Water (5)"},{"time":0.2925,"name":"Fx/Water (6)"},{"time":0.3342,"name":"Fx/Water (8)"},{"time":0.376,"name":"Fx/Water (10)"},{"time":0.4178,"name":"Fx/Water (12)"},{"time":0.4596,"name":"Fx/Water (14)"},{"time":0.5014,"name":"Fx/Water (15)"},{"time":0.5431,"name":null}]},"Fx/Water_2 (1)":{"attachment":[{"time":0.1,"name":"Fx/Water_2 (1)"},{"time":0.1333,"name":"Fx/Water_2 (2)"},{"time":0.1667,"name":"Fx/Water_2 (3)"},{"time":0.2,"name":"Fx/Water_2 (4)"},{"time":0.2333,"name":"Fx/Water_2 (5)"},{"time":0.2667,"name":"Fx/Water_2 (6)"},{"time":0.3,"name":"Fx/Water_2 (7)"},{"time":0.3333,"name":"Fx/Water_2 (8)"},{"time":0.3667,"name":"Fx/Water_2 (9)"},{"time":0.4,"name":"Fx/Water_2 (11)"},{"time":0.4333,"name":"Fx/Water_2 (13)"},{"time":0.4667,"name":"Fx/Water_2 (15)"},{"time":0.5,"name":"Fx/Water_2 (16)"},{"time":0.5333,"name":"Fx/Water_2 (17)"},{"time":0.5667,"name":null}]},"Shadown_body":{"color":[{"color":"ffffffff"},{"time":0.2667,"color":"ffffff45","curve":"stepped"},{"time":0.4333,"color":"ffffff45"},{"time":0.7333,"color":"ffffffff"}]},"Sweat4":{"color":[{"time":0.3,"color":"ffffff00"},{"time":0.7333,"color":"ffffffff"}],"attachment":[{"time":0.3,"name":"Sweat"}]}},"bones":{"Body_Bird2":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.2925,"angle":17.2,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-39.9}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.2925,"x":-29.43,"y":-7.92,"curve":0.25,"c3":0.75},{"time":0.7333}]},"Rod_Fishing":{"rotate":[{},{"time":0.2507,"angle":3.02},{"time":0.4596,"angle":1.54},{"time":0.7333,"angle":-2.16}]},"Wire":{"scale":[{},{"time":0.1253,"x":0.734},{"time":0.2507,"x":0.8},{"time":0.4178}]},"Bobber":{"rotate":[{},{"time":0.1253,"angle":-48.35},{"time":0.376,"angle":8.99}]},"Body_Bird3":{"rotate":[{"angle":0.29,"curve":0.25,"c3":0.75},{"time":0.1253,"angle":-18.82,"curve":0.25,"c3":0.75},{"time":0.2089,"angle":-29.16,"curve":0.25,"c3":0.75},{"time":0.376,"angle":1.09,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":12.52}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.2089,"x":7.69,"y":-17.98,"curve":0.25,"c3":0.75},{"time":0.4596}]},"Body_Bird4":{"rotate":[{"angle":4.36,"curve":0.25,"c3":0.75},{"time":0.1671,"angle":-21.63,"curve":0.25,"c3":0.75},{"time":0.5014,"angle":15.12,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-5.69}]},"Body_Bird6":{"rotate":[{"angle":3.98,"curve":0.381,"c2":0.55,"c3":0.742},{"time":0.1253,"angle":-23.33},{"time":0.2925,"angle":-28.31},{"time":0.5014,"angle":18.64},{"time":0.7333,"angle":-14.94}]},"Body_Bird5":{"rotate":[{"angle":3.56,"curve":0.25,"c3":0.75},{"time":0.0836,"angle":31.61,"curve":0.25,"c3":0.75},{"time":0.2925,"angle":-32.45,"curve":0.25,"c3":0.75},{"time":0.5849,"angle":6.66,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-11.94}]},"Body_Bird10":{"rotate":[{},{"time":0.1671,"angle":-18.1},{"time":0.4178,"angle":12.41},{"time":0.7333,"angle":0.98}]},"Body_Bird11":{"rotate":[{},{"time":0.0836,"angle":16.05},{"time":0.2925,"angle":-17.82},{"time":0.4596,"angle":12.8},{"time":0.6267,"angle":-18.36}]},"Body_Bird12":{"rotate":[{},{"time":0.1253,"angle":19.8},{"time":0.376,"angle":-49.37},{"time":0.5849,"angle":-12.95}]},"Body_Bird7":{"rotate":[{"angle":6.32},{"time":0.2089,"angle":-23.52},{"time":0.4596,"angle":12.72},{"time":0.7333,"angle":-13.73}]},"Body_Bird8":{"rotate":[{"angle":12.95}]},"Body_Bird9":{"rotate":[{"angle":-5.49},{"time":0.1253,"angle":-30.34},{"time":0.3342,"angle":23.68},{"time":0.7333,"angle":-32.53}]},"Hand_Font":{"rotate":[{},{"time":0.2089,"angle":-28.84},{"time":0.7333,"angle":-10.54}],"translate":[{},{"time":0.2089,"x":3.79,"y":18.08},{"time":0.5014}],"scale":[{},{"time":0.2089,"x":1.25},{"time":0.3342}]},"Foam":{"translate":[{"curve":0.25,"c3":0.75},{"time":0.2507,"x":-26.35,"y":-28.87}]},"Z":{"rotate":[{"angle":-0.05}],"scale":[{"x":0.862,"y":0.862}]},"IK_Rod":{"translate":[{},{"time":0.376,"x":-34.79,"y":-82.4},{"time":0.5849,"x":-32.52,"y":-77.03}]},"Fx/Water (1)":{"rotate":[{"time":0.0836,"angle":-9.8}],"translate":[{"time":0.0836,"x":-29.79,"y":-13.54},{"time":0.3342,"x":-27.08,"y":-24.37}],"scale":[{"time":0.0836,"x":1.123,"y":1.123},{"time":0.3342,"x":0.426,"y":0.426}]},"Eye_L2":{"rotate":[{},{"time":0.2507,"angle":-12.72},{"time":0.4178,"angle":-10.62}],"translate":[{},{"time":0.2507,"x":-0.83,"y":32.92},{"time":0.4178,"x":-1.35,"y":27.76}],"scale":[{},{"time":0.2507,"x":0.786,"y":0.636},{"time":0.4178,"x":0.786,"y":0.786}]},"Eye_L3":{"translate":[{},{"time":0.2507,"x":1.64,"y":-19.56}],"scale":[{},{"time":0.2507,"y":0.742}]},"Eye_Close":{"rotate":[{},{"time":0.1253,"angle":14.31},{"time":0.1671,"angle":10.12},{"time":0.2507,"angle":16.93}],"translate":[{},{"time":0.1671,"x":6.73,"y":-4.06},{"time":0.2507,"x":1.33,"y":-3.37}],"scale":[{},{"time":0.1671,"x":-0.948,"y":1.39}]},"Eye_L5":{"translate":[{},{"time":0.2925,"x":-2.47,"y":29.57}]},"Eye_L6":{"translate":[{},{"time":0.2925,"x":11.49,"y":-34.58}]},"Eyebrow_T2":{"rotate":[{},{"time":0.2925,"angle":44.58}],"translate":[{},{"time":0.2925,"x":-10.05,"y":-14.73}]},"Eyebrow_T3":{"rotate":[{},{"time":0.2925,"angle":35.34}],"translate":[{},{"time":0.2925,"x":2.99,"y":-16.95}]},"Elip_Eye":{"rotate":[{"angle":28.27}],"translate":[{"x":-1.07,"y":-3.81}],"scale":[{"y":0.638}]},"Elip_Eye2":{"rotate":[{"angle":21.7}],"translate":[{"x":0.55,"y":-4.25}],"scale":[{"y":0.605}]},"Hand_Back":{"rotate":[{},{"time":0.2507,"angle":-102.13},{"time":0.376,"angle":-56.65},{"time":0.4596,"angle":-24.27},{"time":0.7333,"angle":-14.32}],"translate":[{},{"time":0.1253,"x":-7.78,"y":1.02},{"time":0.2507,"x":14.2,"y":-4.51},{"time":0.7333,"x":9.69,"y":11.96}]},"Neb_Bird":{"rotate":[{},{"time":0.2089,"angle":-5.18},{"time":0.4596,"angle":-25.16}]},"Neb_Bird2":{"rotate":[{},{"time":0.1253,"angle":-19.88},{"time":0.5014,"angle":25.5}]},"Eyebrow_B":{"rotate":[{},{"time":0.2089,"angle":-5.44}],"translate":[{},{"time":0.2089,"x":0.24,"y":7.62}]},"Sweat4":{"rotate":[{"time":0.3,"angle":29.95},{"time":0.7333,"angle":26.87}],"translate":[{"time":0.3,"x":88.05,"y":43.08},{"time":0.7333,"x":73.93,"y":36.09}]}},"deform":{"default":{"Cliping_Foam":{"Cliping_Foam":[{"vertices":[5.48804,-8.28796,4.70398,-4.92798,3.2478,-2.35199,-0.22388,-1.008]}]},"Foam_1":{"Foam_1":[{},{"time":0.376,"vertices":[-7.02002,11.23196,-14.742,14.27396,-10.52997,4.914,-9.94501,-2.92499,-9.711,3.15897,-5.73303,6.20099]}]},"Foam_2":{"Foam_2":[{},{"time":0.2507,"vertices":[9,8.27997,27.71991,6.11996,22.67987,-11.55594,4.10394,-23.21988,-2.70007,-27.97183,-11.52002,-20.87994,-16.01996,-2.51999,-24.8399,2.15997,0.89996,14.93994]}]},"Foam_4":{"Foam_4":[{"offset":2,"vertices":[0.83801,2.93298]},{"time":0.5014,"vertices":[-33.87994,21.85791,11.07501,21.5369,7.99597,-4.94803,-29.25586,-7.52203]}]},"Foam_Blue1":{"Foam_Blue1":[{"vertices":[-4.46375,-0.14398,-2.01605,9.79187,-3.8877,11.80801]}]},"Foam_Blue2":{"Foam_Blue2":[{},{"time":0.2507,"vertices":[1.93506,34.44296,6.966,18.57599,-0.77441,-3.09601,-31.73425,-8.901,-32.1214,-7.353,-19.34998,1.16101,-6.57898,15.09299,-0.77405,18.57599]}]},"Line_Body":{"Line_Body":[{},{"time":0.2507,"offset":6,"vertices":[2.46857,-0.63132,2.13016,-1.39817,1.71073,-10.20604,-1.69366,-10.20887,5.33954,-8.50408,2.2911,-9.77652,0.61106,-1.28346,0.16155,-1.41227]},{"time":0.7333,"offset":6,"vertices":[1.93992,2.63675,0.76358,1.6172,10.86894,0.58576,4.31652,2.60571,8.39658,-1.17268,3.32012,-1.90021,0.61106,-1.28346,0.16155,-1.41227]}]}}}},"Happy":{"slots":{"Cliping_Foam":{"attachment":[{"name":null}]},"Foam_1":{"attachment":[{"name":null}]},"Foam_2":{"attachment":[{"name":null}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_4":{"attachment":[{"name":null}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"attachment":[{"name":null}]},"Foam_Blue3":{"attachment":[{"name":null}]},"Shadow_bobber":{"attachment":[{"name":null}]},"Shadown_body":{"color":[{"color":"ffffff8e"},{"time":0.2667,"color":"ffffff33"},{"time":0.6,"color":"ffffff8e"}]}},"bones":{"Eye_Close":{"rotate":[{"angle":9.21}],"translate":[{"x":8.44,"y":-2.73}],"scale":[{"x":-0.948,"y":1.39}]},"Body_Bird3":{"rotate":[{"angle":-1.78,"curve":0.25,"c3":0.75},{"time":0.1,"angle":-0.53,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":-10.61,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-1.78}]},"Body_Bird5":{"rotate":[{"angle":7.74,"curve":0.25,"c3":0.75},{"time":0.1,"angle":17.74,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-18.27,"curve":0.25,"c3":0.75},{"time":0.6,"angle":7.74}]},"Eyebrow_T3":{"rotate":[{"angle":34.95}],"translate":[{"x":2.11,"y":-14.52}]},"IK_Rod":{"rotate":[{"angle":13.79,"curve":0.27,"c2":0.08,"c3":0.967,"c4":0.65},{"time":0.2667,"angle":8.57,"curve":0.028,"c2":0.16,"c3":0.75},{"time":0.6,"angle":13.79}],"translate":[{"x":522.78,"y":363.52,"curve":0.27,"c2":0.08,"c3":0.967,"c4":0.65},{"time":0.2667,"x":554.63,"y":327.1,"curve":0.028,"c2":0.16,"c3":0.75},{"time":0.6,"x":522.78,"y":363.52}]},"Eyebrow_T2":{"rotate":[{"angle":30.79}],"translate":[{"x":-11.36,"y":-8.19}]},"Eyebrow_B":{"rotate":[{"angle":10.71}],"translate":[{"x":-0.23,"y":-8.61}]},"Eyebrow_B2":{"rotate":[{"angle":3.93}],"translate":[{"x":1.58,"y":-6.34}]},"Body_Bird10":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-17.56,"curve":0.25,"c3":0.75},{"time":0.6}]},"Body_Bird11":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.1333,"angle":20.29,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-0.92,"curve":0.25,"c3":0.75},{"time":0.6}]},"Body_Bird2":{"rotate":[{"angle":-18.56},{"time":0.2667,"angle":-24.07},{"time":0.6,"angle":-18.56}],"translate":[{"curve":0.003,"c2":0.09,"c3":0.75},{"time":0.1,"x":-5.55,"y":4.44,"curve":0.25,"c3":0.973,"c4":0.91},{"time":0.2667,"x":4.44,"y":-5.55,"curve":0.003,"c2":0.09,"c3":0.75},{"time":0.4333,"x":-4.44,"y":2.22,"curve":0.25,"c3":0.973,"c4":0.91},{"time":0.6}]},"Rod_Fishing":{"rotate":[{"angle":-31.8,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-51.39,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-31.8}],"translate":[{"x":-19.54,"y":57.89,"curve":0.25,"c3":0.75},{"time":0.2667,"x":-43.61,"y":59.47,"curve":0.25,"c3":0.75},{"time":0.6,"x":-19.54,"y":57.89}]},"Hand_Font":{"rotate":[{"angle":11.54,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-40.98,"curve":0.25,"c3":0.75},{"time":0.6,"angle":11.54}]},"Hand_Back":{"rotate":[{"angle":-27.78,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":10.79,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-27.78}]},"Eye_L5":{"rotate":[{"angle":14.77}],"translate":[{"x":-1.97,"y":23.56}]},"Hand_Font2":{"rotate":[{"angle":-40.28,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-18.36,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-40.28}]},"Wire":{"scale":[{"x":0.435,"curve":0.25,"c3":0.75},{"time":0.2667,"x":0.659},{"time":0.6,"x":0.435}]},"Elip_Eye":{"rotate":[{"angle":45.8}],"translate":[{"x":-2.62,"y":-4.53}],"scale":[{"x":1.004,"y":0.882}]},"Wire2":{"scale":[{"x":0.527}]},"Elip_Eye2":{"rotate":[{"angle":25.88}],"translate":[{"x":0.67,"y":-12.35}],"scale":[{"x":0.903,"y":0.789}]},"Body_Bird8":{"rotate":[{"angle":12.95,"curve":0.25,"c3":0.75},{"time":0.1333,"angle":-3.05,"curve":0.25,"c3":0.75},{"time":0.4,"angle":20.01,"curve":0.25,"c3":0.75},{"time":0.6,"angle":12.95}]},"Body_Bird7":{"rotate":[{"angle":-1.21,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":13.47,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-1.21}]},"Body_Bird9":{"rotate":[{"angle":-5.49,"curve":0.25,"c3":0.75},{"time":0.2,"angle":-21.38,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":20.82,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-5.49}]},"Body_Bird4":{"rotate":[{"angle":8.54,"curve":0.25,"c3":0.75},{"time":0.3,"angle":-13.76,"curve":0.25,"c3":0.75},{"time":0.6,"angle":8.54}]},"Body_Bird6":{"rotate":[{"angle":8.16,"curve":0.25,"c3":0.75},{"time":0.1333,"angle":15.81,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-14.13,"curve":0.25,"c3":0.75},{"time":0.6,"angle":8.16}]},"Eye_L3":{"rotate":[{"angle":6.06}],"translate":[{"x":11.95,"y":-65.46}]},"Eye_L2":{"rotate":[{"angle":0.84}],"translate":[{"x":-0.67,"y":28.22}]},"Eye_L6":{"rotate":[{"angle":10.54}],"translate":[{"x":28.46,"y":-83.8}]},"Neb_Bird2":{"rotate":[{"angle":6.03}]},"Neb_Bird":{"rotate":[{"angle":2.69}]},"Hand_Back2":{"rotate":[{"angle":-4.61,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":1.96,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-4.61}]},"Hand_Back3":{"rotate":[{"angle":-16.47,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-1.48,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-16.47}]},"Hand_Font4":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-17.28,"curve":0.25,"c3":0.75},{"time":0.6}]},"Hand_Font3":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.2667,"angle":6.33,"curve":0.25,"c3":0.75},{"time":0.6}]},"Body_Bird12":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.1333,"angle":14.1,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-37.31,"curve":0.25,"c3":0.75},{"time":0.6}]}},"deform":{"default":{"Eye_1":{"Eye_1":[{"offset":12,"vertices":[2.43031,-0.15855,-0.88443,2.26918,3.23582,-0.47863,-0.93511,3.13453,3.42474,-0.49984,-0.99578,3.31469,3.84493,-0.16456,-1.47732,3.55363,3.70995,-0.68495,-0.9487,3.65137,1.41742,0.43913,-0.99752,1.09863]}]},"Line_Body":{"Line_Body":[{"offset":6,"vertices":[-2.46524,1.65549,-2.54728,1.52624,3.73698,3.03474,3.57558,3.22332,0.03466,4.17962,-0.18081,4.17585,-0.3203,2.71895,-0.46003,2.69882]}]}}}},"Idle_Fishing":{"slots":{"Foam_2":{"attachment":[{"name":null}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_6":{"color":[{"time":0.4,"color":"ffffffff"},{"time":0.6,"color":"ffffff00","curve":"stepped"},{"time":0.6667,"color":"ffffffff","curve":"stepped"},{"time":1.0667,"color":"ffffffff"},{"time":1.3333,"color":"ffffff00"}],"attachment":[{"name":"Foam_6"}]},"Foam_7":{"color":[{"time":0.7,"color":"ffffffff"},{"time":1,"color":"ffffff00"}],"attachment":[{"time":0.2333,"name":"Foam_7"}]},"Foam_8":{"color":[{"time":1.1,"color":"ffffffff"},{"time":1.3333,"color":"ffffff00"}],"attachment":[{"time":0.6,"name":"Foam_7"}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"attachment":[{"name":null}]},"Foam_Blue3":{"attachment":[{"name":null}]},"Fx/Water_2 (1)":{"attachment":[{"name":"Fx/Water_2 (2)"},{"time":0.0254,"name":"Fx/Water_2 (3)"},{"time":0.0762,"name":"Fx/Water_2 (4)"},{"time":0.1017,"name":"Fx/Water_2 (5)"},{"time":0.1271,"name":"Fx/Water_2 (6)"},{"time":0.1525,"name":"Fx/Water_2 (7)"},{"time":0.1779,"name":"Fx/Water_2 (8)"},{"time":0.2033,"name":"Fx/Water_2 (9)"},{"time":0.2287,"name":"Fx/Water_2 (10)"},{"time":0.2541,"name":"Fx/Water_2 (11)"},{"time":0.2796,"name":"Fx/Water_2 (12)"},{"time":0.305,"name":"Fx/Water_2 (13)"},{"time":0.3304,"name":"Fx/Water_2 (14)"},{"time":0.3558,"name":"Fx/Water_2 (15)"},{"time":0.3812,"name":"Fx/Water_2 (16)"},{"time":0.4066,"name":"Fx/Water_2 (17)"},{"time":0.4333,"name":"Fx/Water_2 (2)"},{"time":0.4587,"name":"Fx/Water_2 (3)"},{"time":0.5096,"name":"Fx/Water_2 (4)"},{"time":0.535,"name":"Fx/Water_2 (5)"},{"time":0.5604,"name":"Fx/Water_2 (6)"},{"time":0.5858,"name":"Fx/Water_2 (7)"},{"time":0.6112,"name":"Fx/Water_2 (8)"},{"time":0.6366,"name":"Fx/Water_2 (9)"},{"time":0.6621,"name":"Fx/Water_2 (10)"},{"time":0.6875,"name":"Fx/Water_2 (11)"},{"time":0.7129,"name":"Fx/Water_2 (12)"},{"time":0.7383,"name":"Fx/Water_2 (13)"},{"time":0.7637,"name":"Fx/Water_2 (14)"},{"time":0.7891,"name":"Fx/Water_2 (15)"},{"time":0.8146,"name":"Fx/Water_2 (16)"},{"time":0.84,"name":"Fx/Water_2 (17)"},{"time":0.8654,"name":null}]},"Fx/Water_2 (1)2":{"attachment":[{"time":0.2,"name":"Fx/Water_2 (2)"},{"time":0.2253,"name":"Fx/Water_2 (3)"},{"time":0.276,"name":"Fx/Water_2 (4)"},{"time":0.3014,"name":"Fx/Water_2 (5)"},{"time":0.3267,"name":"Fx/Water_2 (6)"},{"time":0.3521,"name":"Fx/Water_2 (7)"},{"time":0.3774,"name":"Fx/Water_2 (8)"},{"time":0.4028,"name":"Fx/Water_2 (9)"},{"time":0.4281,"name":"Fx/Water_2 (10)"},{"time":0.4535,"name":"Fx/Water_2 (11)"},{"time":0.4788,"name":"Fx/Water_2 (12)"},{"time":0.5042,"name":"Fx/Water_2 (13)"},{"time":0.5295,"name":"Fx/Water_2 (14)"},{"time":0.5549,"name":"Fx/Water_2 (15)"},{"time":0.5802,"name":"Fx/Water_2 (16)"},{"time":0.6056,"name":"Fx/Water_2 (17)"},{"time":0.6309,"name":"Fx/Water_2 (2)"},{"time":0.6563,"name":"Fx/Water_2 (3)"},{"time":0.707,"name":"Fx/Water_2 (4)"},{"time":0.7323,"name":"Fx/Water_2 (5)"},{"time":0.7577,"name":"Fx/Water_2 (6)"},{"time":0.783,"name":"Fx/Water_2 (7)"},{"time":0.8084,"name":"Fx/Water_2 (8)"},{"time":0.8333,"name":null},{"time":0.8337,"name":"Fx/Water_2 (9)"},{"time":0.8591,"name":"Fx/Water_2 (10)"},{"time":0.8844,"name":"Fx/Water_2 (11)"},{"time":0.9098,"name":"Fx/Water_2 (12)"},{"time":0.9351,"name":"Fx/Water_2 (13)"},{"time":0.9605,"name":"Fx/Water_2 (14)"},{"time":0.9858,"name":"Fx/Water_2 (15)"},{"time":1.0112,"name":"Fx/Water_2 (16)"},{"time":1.0365,"name":"Fx/Water_2 (17)"},{"time":1.0619,"name":null}]},"Fx/Water_2 (1)3":{"attachment":[{"name":"Fx/Water_2 (4)"},{"time":0.0333,"name":"Fx/Water_2 (5)"},{"time":0.0667,"name":"Fx/Water_2 (7)"},{"time":0.1,"name":"Fx/Water_2 (8)"},{"time":0.1333,"name":"Fx/Water_2 (9)"},{"time":0.1667,"name":"Fx/Water_2 (11)"},{"time":0.2,"name":"Fx/Water_2 (12)"},{"time":0.2333,"name":"Fx/Water_2 (13)"},{"time":0.2667,"name":"Fx/Water_2 (15)"},{"time":0.3,"name":"Fx/Water_2 (16)"},{"time":0.3333,"name":"Fx/Water_2 (17)"},{"time":0.3667,"name":null},{"time":0.9,"name":"Fx/Water_2 (3)"},{"time":0.9667,"name":"Fx/Water_2 (4)"},{"time":1,"name":"Fx/Water_2 (6)"},{"time":1.0333,"name":"Fx/Water_2 (7)"},{"time":1.0667,"name":"Fx/Water_2 (9)"},{"time":1.1,"name":"Fx/Water_2 (10)"},{"time":1.1333,"name":"Fx/Water_2 (11)"},{"time":1.1667,"name":"Fx/Water_2 (13)"},{"time":1.2,"name":"Fx/Water_2 (14)"},{"time":1.2333,"name":"Fx/Water_2 (15)"},{"time":1.2667,"name":"Fx/Water_2 (17)"},{"time":1.3,"name":"Fx/Water_2 (2)"},{"time":1.3333,"name":"Fx/Water_2 (3)"}]},"Sweat":{"color":[{"color":"ffffff00","curve":"stepped"},{"time":0.1667,"color":"ffffff00"},{"time":0.4333,"color":"ffffffff","curve":"stepped"},{"time":1.0333,"color":"ffffffff"},{"time":1.3333,"color":"ffffff00"}],"attachment":[{"name":"Sweat"}]},"Sweat2":{"color":[{"color":"ffffff00"},{"time":0.2333,"color":"ffffffff","curve":"stepped"},{"time":0.4667,"color":"ffffffff"},{"time":0.6667,"color":"ffffff00"}],"attachment":[{"name":"Sweat"}]},"Sweat3":{"color":[{"time":0.4333,"color":"ffffff00"},{"time":0.6667,"color":"ffffffff","curve":"stepped"},{"time":1.1,"color":"ffffffff"},{"time":1.3333,"color":"ffffff00"}],"attachment":[{"time":0.4333,"name":"Sweat"}]},"Sweat4":{"color":[{"color":"ffffffff"},{"time":0.5333,"color":"ffffff00","curve":"stepped"},{"time":0.9,"color":"ffffff00"},{"time":1.3333,"color":"ffffffff"}],"attachment":[{"name":"Sweat"}]}},"bones":{"Body_Bird2":{"rotate":[{"angle":-39.9},{"time":0.3333,"angle":-49.47},{"time":1.3333,"angle":-39.9}]},"Rod_Fishing":{"rotate":[{"angle":-2.16},{"time":0.3333,"angle":-11.86},{"time":1.3333,"angle":-2.16}]},"Bobber":{"rotate":[{"angle":8.99}]},"Body_Bird3":{"rotate":[{"angle":12.52},{"time":0.2,"angle":4.88},{"time":0.6333,"angle":29.13},{"time":1.3333,"angle":12.52}]},"Body_Bird4":{"rotate":[{"angle":-5.69,"curve":0.25,"c3":0.75},{"time":0.4,"angle":9.15,"curve":0.25,"c3":0.75},{"time":0.9333,"angle":-8.61,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-5.69}]},"Body_Bird6":{"rotate":[{"angle":-14.94,"curve":0.25,"c3":0.75},{"time":0.1,"angle":4.17,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":-29.87,"curve":0.25,"c3":0.75},{"time":0.7,"angle":3.69,"curve":0.25,"c3":0.75},{"time":1.1333,"angle":-21.79,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-14.94}]},"Body_Bird5":{"rotate":[{"angle":-11.94,"curve":0.25,"c3":0.75},{"time":0.2,"angle":-37.73,"curve":0.25,"c3":0.75},{"time":0.6333,"angle":12.47,"curve":0.25,"c3":0.75},{"time":1.1,"angle":-31.16,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-11.94}]},"Body_Bird10":{"rotate":[{"angle":0.98,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":-14.03,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":0.98}]},"Body_Bird11":{"rotate":[{"angle":-18.36,"curve":0.25,"c3":0.75},{"time":0.1,"angle":-4.85,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-14.96,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-18.36}]},"Body_Bird12":{"rotate":[{"angle":-12.95}]},"Body_Bird7":{"rotate":[{"angle":-13.73,"curve":0.25,"c3":0.75},{"time":0.3,"angle":1.64,"curve":0.25,"c3":0.75},{"time":0.9333,"angle":3.19,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-13.73}]},"Body_Bird8":{"rotate":[{"angle":12.95,"curve":0.25,"c3":0.75},{"time":0.3333,"angle":38.72,"curve":0.25,"c3":0.75},{"time":0.6,"angle":29.72,"curve":0.25,"c3":0.75},{"time":0.9,"angle":37.2,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":12.95}]},"Body_Bird9":{"rotate":[{"angle":-32.53,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":8.14,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-17.32,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-32.53}]},"Hand_Font":{"rotate":[{"angle":-10.54},{"time":0.3333,"angle":10.6},{"time":1.3333,"angle":-10.54}]},"Foam":{"translate":[{"x":-26.35,"y":-28.87},{"time":0.8333,"x":-53.8,"y":-38.68},{"time":1.3333,"x":-26.35,"y":-28.87}],"scale":[{"x":2.434,"y":2.434}]},"Z":{"rotate":[{"angle":-0.05}],"scale":[{"x":0.862,"y":0.862}]},"IK_Rod":{"translate":[{"x":-32.52,"y":-77.03},{"time":0.8333,"x":-59.98,"y":-86.83},{"time":1.3333,"x":-32.52,"y":-77.03}]},"Eye_L2":{"rotate":[{"angle":-10.62}],"translate":[{"x":-1.35,"y":27.76},{"time":0.2667,"x":-1.73,"y":24.1},{"time":0.3667,"x":-1.47,"y":26.65},{"time":0.6,"x":-1.62,"y":25.2},{"time":1.3333,"x":-1.35,"y":27.76}],"scale":[{"x":0.786,"y":0.786}]},"Eye_L3":{"translate":[{"x":1.64,"y":-19.56}],"scale":[{"y":0.742}]},"Eye_Close":{"rotate":[{"angle":16.93}],"translate":[{"x":1.33,"y":-3.37}],"scale":[{"x":-0.948,"y":1.39}]},"Eye_L5":{"translate":[{"x":-2.47,"y":29.57},{"time":0.2667,"x":-1.71,"y":20.45},{"time":0.4,"x":-1.85,"y":22.05},{"time":0.5667,"x":-1.79,"y":21.44},{"time":1.3333,"x":-2.47,"y":29.57}]},"Eye_L6":{"translate":[{"x":11.49,"y":-34.58}]},"Eyebrow_T2":{"rotate":[{"angle":44.58},{"time":0.0667,"angle":49.67},{"time":0.1333,"angle":44.66},{"time":0.2,"angle":52.77},{"time":0.2667,"angle":46.23},{"time":0.3333,"angle":50.45},{"time":0.4,"angle":45.26},{"time":1.3333,"angle":44.58}],"translate":[{"x":-10.05,"y":-14.73}]},"Eyebrow_T3":{"rotate":[{"angle":35.34},{"time":0.0667,"angle":44.71},{"time":0.1333,"angle":35.94},{"time":0.2333,"angle":43.58},{"time":0.3333,"angle":34.15},{"time":0.4333,"angle":42.17},{"time":0.5333,"angle":35.34}],"translate":[{"x":2.99,"y":-16.95},{"time":0.2333,"x":5.14,"y":-20.09},{"time":1,"x":2.99,"y":-16.95}]},"Elip_Eye":{"rotate":[{"angle":28.27}],"translate":[{"x":-1.07,"y":-3.81},{"time":0.1,"x":-5.46,"y":-7.49},{"time":1.3333,"x":-1.07,"y":-3.81}],"scale":[{"y":0.638}]},"Elip_Eye2":{"rotate":[{"angle":21.7}],"translate":[{"x":0.55,"y":-4.25},{"time":0.1,"x":-5.88,"y":-10.43},{"time":1.3333,"x":0.55,"y":-4.25}],"scale":[{"y":0.605}]},"Hand_Back":{"rotate":[{"angle":-14.32},{"time":0.3333,"angle":6.78},{"time":1.3333,"angle":-14.32}],"translate":[{"x":9.69,"y":11.96},{"time":0.3333,"x":4.2,"y":7.2},{"time":1.3333,"x":9.69,"y":11.96}]},"Neb_Bird":{"rotate":[{"angle":-25.16}]},"Neb_Bird2":{"rotate":[{"angle":25.5}]},"Eyebrow_B":{"rotate":[{"angle":-5.44}],"translate":[{"x":0.24,"y":7.62}]},"Hand_Font2":{"rotate":[{},{"time":0.3333,"angle":-7.27},{"time":1.3333}]},"Hand_Font3":{"rotate":[{},{"time":0.3333,"angle":-4.51},{"time":1.3333}]},"Foam_6":{"rotate":[{"time":0.6667,"angle":-92.95}],"translate":[{"x":8.34,"y":5.36},{"time":0.6,"x":-17.37,"y":4.08,"curve":"stepped"},{"time":0.6667,"x":11.32,"y":14.3},{"time":1.3333,"x":11.36,"y":37.7}],"scale":[{"x":0.558,"y":0.558},{"time":0.6,"x":1.785,"y":1.785,"curve":"stepped"},{"time":0.6667,"x":0.558,"y":0.558},{"time":1.3333,"x":1.938,"y":1.938}]},"Foam_7":{"rotate":[{"time":0.2333,"angle":21.15}],"translate":[{"time":0.2333,"x":-1.19,"y":13.11},{"time":1,"x":16.93,"y":-5.91}],"scale":[{"time":0.2333,"x":0.435,"y":0.435},{"time":1,"x":1.602,"y":2.004}]},"Foam_8":{"rotate":[{"time":0.6,"angle":-119.48},{"time":1.3333,"angle":-145.95}],"translate":[{"time":0.6,"x":-12.71,"y":19.07},{"time":1.3333,"x":-38.25,"y":35.61}],"scale":[{"time":0.6,"x":0.719,"y":0.719},{"time":1.3333,"x":1.645,"y":1.645}]},"Sweat":{"rotate":[{},{"time":1.3333,"angle":-13}],"translate":[{"x":28.25,"y":4.31},{"time":0.1667,"x":56.48,"y":12.11},{"time":0.6667,"x":10.89,"y":1.66},{"time":1.3333,"x":-6.47,"y":-0.99}],"scale":[{},{"time":1.3333,"x":1.421}]},"Sweat2":{"rotate":[{},{"time":0.6667,"angle":-5.01}],"translate":[{"x":56.22,"y":29.76},{"time":0.6667,"x":-7.14,"y":18.7}]},"Sweat3":{"rotate":[{"time":0.4333,"angle":8.68},{"time":1.3333,"angle":-23.42}],"translate":[{"time":0.4333,"x":44.05,"y":25.26},{"time":1.3333,"x":-7.9,"y":19.58}]},"Sweat4":{"rotate":[{"angle":26.87},{"time":0.5333,"angle":16.34,"curve":"stepped"},{"time":0.9,"angle":40.69},{"time":1.3333,"angle":26.87}],"translate":[{"x":73.93,"y":36.09},{"time":0.5333,"x":51.1,"y":20.36,"curve":"stepped"},{"time":0.9,"x":85.43,"y":48.65},{"time":1.3333,"x":73.93,"y":36.09}]},"Fx/Water_2 (1)":{"rotate":[{"angle":-58.66},{"time":0.1,"angle":-39.39}],"translate":[{"x":-7.42,"y":-0.77},{"time":0.1,"x":3.53,"y":3.74}],"scale":[{"x":-1}],"shear":[{},{"time":0.1,"x":28.28}]},"Fx/Water_2 (1)2":{"rotate":[{"time":0.2,"angle":48.49},{"time":1,"angle":19.14}],"translate":[{"time":0.2,"x":-15.71,"y":7.05,"curve":"stepped"},{"time":0.7667,"x":-15.71,"y":7.05},{"time":1,"x":-30.9,"y":11.72}],"scale":[{"time":0.2,"x":-1}],"shear":[{"time":0.2,"x":-27.15,"y":-26.08}]},"Fx/Water_2 (1)3":{"rotate":[{"angle":18.61}],"translate":[{"x":0.12,"y":9.1},{"time":0.3667,"x":5.83,"y":5.11},{"time":0.8667,"x":-9.14,"y":9.83},{"time":1.3333,"x":0.12,"y":9.1}],"scale":[{"x":-0.833,"y":1.037},{"time":0.3667,"x":-0.833,"y":1.485},{"time":0.8667,"x":-0.5,"y":0.641},{"time":1.3333,"x":-0.833,"y":1.037}],"shear":[{"x":-17.21,"y":-60.64}]},"Fx/Water (1)":{"translate":[{"time":0.5667,"y":1.71}]}},"deform":{"default":{"Cliping_Foam":{"Cliping_Foam":[{"vertices":[5.48804,-8.28796,4.70398,-4.92798,3.2478,-2.35199,-0.22388,-1.008]},{"time":0.8333,"vertices":[-20.83191,-19.03992,-21.16809,-15.45593,-23.07202,-12.09595,-26.87988,-10.86395]},{"time":1.3333,"vertices":[5.48804,-8.28796,4.70398,-4.92798,3.2478,-2.35199,-0.22388,-1.008]}]},"Foam_1":{"Foam_1":[{"vertices":[-4.20761,15.45087,-4.49649,7.64442,-10.93204,-2.11745,-15.9722,-2.92499,-14.13107,5.9715,-6.3363,12.42888]},{"time":0.6667,"vertices":[0.80084,22.32172,-5.91876,13.25862,-10.37274,-0.41124,-20.19363,-6.07671,-16.64099,6.18298,-9.9151,13.95923]},{"time":1.3333,"vertices":[-4.20761,15.45087,-4.49649,7.64442,-10.93204,-2.11745,-15.9722,-2.92499,-14.13107,5.9715,-6.3363,12.42888]}]},"Foam_4":{"Foam_4":[{"vertices":[-26.04538,13.62111,7.65924,12.09474,2.16983,-1.13094,-15.99695,-0.89235]},{"time":0.1667,"vertices":[-24.65143,15.85399,0.77399,6.40116,1.62473,-1.18796,-9.43944,-0.15261]},{"time":0.6667,"vertices":[-20.46664,20.34425,7.72662,6.98972,-0.01056,-1.35904,-15.16461,7.58859]},{"time":1.3333,"vertices":[-26.04538,13.62111,7.65924,12.09474,2.16983,-1.13094,-15.99695,-0.89235]}]},"Line_Body":{"Line_Body":[{"offset":6,"vertices":[1.93992,2.63675,0.76358,1.6172,10.86894,0.58576,4.31652,2.60571,8.39658,-1.17268,3.32012,-1.90021,0.61106,-1.28346,0.16155,-1.41227]}]}}}},"Idle_Sleep":{"slots":{"Foam_1":{"color":[{"time":1.2333,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}]},"Foam_3":{"attachment":[{"time":1.6667,"name":null}]},"Foam_Blue1":{"attachment":[{"time":1.3333,"name":null}]},"Z":{"color":[{"time":0.8333,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}],"attachment":[{"name":"Z"}]},"Z2":{"color":[{"time":1.1,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}],"attachment":[{"time":0.2667,"name":"Z"}]},"Z3":{"color":[{"time":1.3333,"color":"ffffffff"},{"time":1.6667,"color":"ffffff00"}],"attachment":[{"time":0.5,"name":"Z"}]}},"bones":{"Body_Bird2":{"rotate":[{},{"time":0.8333,"angle":2.04},{"time":1.6667}]},"Rod_Fishing":{"rotate":[{},{"time":0.8333,"angle":1.13},{"time":1.6667}]},"Wire":{"scale":[{},{"time":0.8333,"x":0.961},{"time":1.6667}]},"Bobber":{"translate":[{"curve":0.25,"c3":0.75},{"time":0.8333,"x":-7.91,"y":-0.25,"curve":0.25,"c3":0.75},{"time":1.6667}]},"Body_Bird3":{"rotate":[{"angle":0.29,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.1667,"curve":0.25,"c3":0.75},{"time":1,"angle":2.21,"curve":0.243,"c3":0.68,"c4":0.71},{"time":1.6667,"angle":0.29}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.8333,"x":-1.13,"y":-0.05,"curve":0.25,"c3":0.75},{"time":1.6667}]},"Body_Bird4":{"rotate":[{"angle":4.36,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":-1.86,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":4.36}]},"Body_Bird6":{"rotate":[{"angle":3.98,"curve":0.381,"c2":0.55,"c3":0.742},{"time":0.3333,"angle":8.18,"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-3.23,"curve":0.245,"c3":0.637,"c4":0.56},{"time":1.6667,"angle":3.98}]},"Body_Bird5":{"rotate":[{"angle":3.56,"curve":0.375,"c2":0.62,"c3":0.716},{"time":0.1667,"angle":5.73,"curve":0.25,"c3":0.75},{"time":1,"angle":-10.96,"curve":0.243,"c3":0.68,"c4":0.71},{"time":1.6667,"angle":3.56}]},"Body_Bird10":{"rotate":[{},{"time":0.8333,"angle":1.34},{"time":1.6667}]},"Body_Bird11":{"rotate":[{},{"time":0.8333,"angle":11.35},{"time":1.6667}]},"Body_Bird12":{"rotate":[{},{"time":0.8333,"angle":-15.02},{"time":1.6667}]},"Body_Bird7":{"rotate":[{"angle":6.32},{"time":0.8333,"angle":3.73},{"time":1.6667,"angle":6.32}]},"Body_Bird8":{"rotate":[{"angle":12.95},{"time":0.8333,"angle":2.72},{"time":1.6667,"angle":12.95}]},"Body_Bird9":{"rotate":[{"angle":-5.49},{"time":0.8333,"angle":4.1},{"time":1.6667,"angle":-5.49}]},"Hand_Font":{"rotate":[{},{"time":0.8333,"angle":4.23},{"time":1.6667}]},"Foam":{"translate":[{"curve":0.25,"c3":0.75},{"time":0.8333,"x":-7.29,"curve":0.25,"c3":0.75},{"time":1.6667}]},"Z":{"translate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"x":55.18,"y":155.5}],"scale":[{"x":0.862,"y":0.862},{"time":1.1667,"x":3.485,"y":3.485}]},"Z2":{"translate":[{"time":0.2667,"curve":0.25,"c3":0.75},{"time":1.4333,"x":55.18,"y":155.5}],"scale":[{"time":0.2667,"x":0.647,"y":0.647},{"time":1.4333,"x":3.126,"y":3.126}]},"Z3":{"translate":[{"time":0.5,"curve":0.25,"c3":0.75},{"time":1.6667,"x":55.18,"y":155.5}],"scale":[{"time":0.5,"x":0.431,"y":0.431},{"time":1.6667,"x":2.802,"y":2.802}]}},"deform":{"default":{"Foam_1":{"Foam_1":[{},{"time":0.5,"vertices":[26.00464,-31.4632,30.97858,-41.85718,23.46375,-27.30524,28.45935,-29.24716,28.54517,-28.69061,23.46375,-24.30222]},{"time":0.9667,"vertices":[68.31966,-82.80534,69.22974,-81.76784,68.94663,-73.30868,79.42351,-75.49419,77.33321,-79.78156,73.52988,-83.60997]},{"time":1.4333,"vertices":[108.93231,-128.82892,100.27222,-114.39209,108.63342,-112.50406,121.8739,-121.23193,124.48462,-128.75635,115.93634,-131.19595]}]},"Foam_2":{"Foam_2":[{},{"time":0.6667,"vertices":[5.81604,-9.99496,8.43793,-8.38696,14.27478,-10.97418,20.46161,-18.03891,8.28564,-8.61725,12.68799,-1.46399,2.29681,-0.26498,10.7868,-6.72052,9.40997,-6.90399]},{"time":1.3333,"vertices":[-6.90302,-7.78796,-10.26599,-9.91196,-7.25702,-8.84998,-4.95599,-4.95599,-4.60199,-7.07999]},{"time":1.6667}]},"Foam_3":{"Foam_1":[{"time":0.5,"vertices":[13.59998,-11.96808,13.59998,-11.96808,13.59998,-11.96808,13.59998,-11.96808]},{"time":0.7333,"vertices":[16.04785,-25.29602,15.23199,-10.8801,13.59998,-11.96808,15.23199,-20.12802]},{"time":1.2667,"vertices":[66.36816,-73.43994,62.83221,-57.392,56.30426,-58.20798,56.84833,-75.0719]},{"time":1.6667,"vertices":[95.01331,-100.44397,108.37341,-95.14801,124.5014,-118.2359,99.50952,-113.7879]}]},"Foam_4":{"Foam_4":[{"offset":2,"vertices":[0.83801,2.93298]},{"time":0.6,"vertices":[2.24091,-15.68698,1.245,3.23697,0,0,3.98401,-7.22098]},{"time":1.1667,"vertices":[-6.39538,1.11273,9.0737,1.5173,-1.71893,1.74301,-4.58239,-2.13984]},{"time":1.6667,"offset":2,"vertices":[0.83801,2.93298]}]},"Foam_Blue1":{"Foam_Blue1":[{"vertices":[-4.46375,-0.14398,-2.01605,9.79187,-3.8877,11.80801]},{"time":0.2667,"vertices":[7.65155,-24.35226,20.09283,-22.88739,16.30157,-18.14472,19.50378,-17.03797,14.81372,-20.38801,15.75171,-18.37797]},{"time":0.6667,"vertices":[44.28442,-62.67358,55.6394,-69.03448,45.59161,-58.32309,48.83276,-58.1619,41.84192,-61.681,48.27087,-69.5827]},{"time":1.3333,"vertices":[109.69232,-156.67136,116.77258,-148.19391,118.30072,-145.89767,133.96375,-158.60706,132.19092,-171.09634,123.22266,-170.5169]}]},"Foam_Blue2":{"Foam_Blue2":[{},{"time":0.1667,"vertices":[-0.8452,3.45129,-5.7584,-3.42937,-5.42659,-4.91005,-4.10088,0.04382,-2.7939,0.72782,-3.42781,2.27737,0,0,-1.83129,0.35217]},{"time":0.7667,"vertices":[-3.88794,15.87592,-0.68402,8.38797,4.21198,-0.89996,-5.61603,0.86401,-12.85193,3.34799,-15.76794,10.47592,0,0,-8.42395,1.62]},{"time":1.2667,"vertices":[-14.11195,17.56796,-17.18397,16.46395,-24.28775,9.93602,-26.11192,9.168,-17.66393,4.22402,-11.90397,7.67998,-4.896,3.02402,-9.79201,8.06399]},{"time":1.6667}]},"Foam_Blue3":{"Foam_Blue3":[{"time":0.2,"vertices":[11.74469,-1.05554,21.08075,-4.24924,12.15912,-5.18845,12.07471,-20.46182,4.45715,-15.79559,12.09845,-12.25385]},{"time":0.6333,"vertices":[-5.69818,-10.84866,1.3736,-10.46808,4.01605,-11.2623,8.32062,-17.86542,4.45715,-15.79559,5.03754,-19.38678]},{"time":1.0333,"vertices":[-2.83813,-12.1908,-3.80347,-13.36426,1.1051,-8.23929,4.34265,-11.21243,4.45715,-15.79559,6.97253,-20.46603]},{"time":1.4,"vertices":[4.82043,-8.28445,18.03589,-7.41003,5.02917,-9.53436,3.55811,-10.66467,2.5639,-10.31189,2.85895,-9.48029]},{"time":1.6667,"vertices":[11.74469,-1.05554,21.08075,-4.24924,12.15912,-5.18845,12.07471,-20.46182,4.45715,-15.79559,12.09845,-12.25385]}]}}}},"No_Idle":{"slots":{"Cliping_Foam":{"attachment":[{"name":null}]},"Eye_1":{"attachment":[{"name":null}]},"Eye_2":{"attachment":[{"name":null}]},"Eye_3":{"attachment":[{"name":null}]},"Eye_4":{"attachment":[{"name":null}]},"Eye_Close":{"attachment":[{"name":null}]},"Eye_Close2":{"attachment":[{"name":null}]},"Foam_1":{"attachment":[{"name":null}]},"Foam_2":{"attachment":[{"name":null}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_4":{"attachment":[{"name":null}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"attachment":[{"name":null}]},"Foam_Blue3":{"attachment":[{"name":null}]},"Shadow_bobber":{"attachment":[{"name":null}]}},"bones":{"Eye_Close":{"rotate":[{"angle":20.49}],"translate":[{"x":1.2,"y":-6.62}],"scale":[{"x":-0.948,"y":1.39}]},"Body_Bird3":{"rotate":[{"angle":2.34,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.1667,"angle":3.45,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":-2.58,"curve":0.242,"c3":0.667,"c4":0.67},{"time":1.3333,"angle":2.34}]},"Body_Bird10":{"rotate":[{},{"time":0.6667,"angle":1.34},{"time":1.3333}]},"Body_Bird11":{"rotate":[{},{"time":0.6667,"angle":11.35},{"time":1.3333}]},"Rod_Fishing":{"rotate":[{"angle":-26,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-20.58},{"time":1.3333,"angle":-26}]},"Hand_Font":{"rotate":[{"angle":49.31,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":55.28},{"time":1.3333,"angle":49.31}]},"Hand_Back":{"rotate":[{"angle":-3.71}]},"IK_Rod":{"translate":[{"x":539.7,"y":338.39,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.6667,"x":541.97,"y":342.17,"curve":0.375,"c2":0.5,"c3":0.75},{"time":1.3333,"x":539.7,"y":338.39}]},"Body_Bird2":{"rotate":[{"angle":-14.17,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-15.88,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-14.17}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.6667,"x":-0.19,"y":2.53,"curve":0.25,"c3":0.75},{"time":1.3333}]},"Wire":{"scale":[{"x":0.315}]},"Hand_Font2":{"rotate":[{"angle":-28.61,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-22.89,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":-28.61}]},"Wire2":{"scale":[{"x":0.527}]},"Elip_Eye2":{"translate":[{"x":-4.79,"y":-8.12}]},"Body_Bird9":{"rotate":[{"angle":-5.49},{"time":0.6667,"angle":11.34},{"time":1.3333,"angle":-5.49}]},"Elip_Eye":{"translate":[{"x":-4.19,"y":-6.16}]},"Body_Bird7":{"rotate":[{"angle":6.32},{"time":0.6667,"angle":3.73},{"time":1.3333,"angle":6.32}]},"Body_Bird4":{"rotate":[{"angle":4.36,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-7.1,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":4.36}]},"Body_Bird8":{"rotate":[{"angle":12.95},{"time":0.6667,"angle":2.72},{"time":1.3333,"angle":12.95}]},"Body_Bird6":{"rotate":[{"angle":-5.81,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333,"angle":8.57,"curve":0.25,"c3":0.625,"c4":0.5},{"time":1,"angle":-20.18,"curve":0.25,"c3":0.625,"c4":0.5},{"time":1.3333,"angle":-5.81}]},"Body_Bird5":{"rotate":[{"angle":6.44,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.1667,"angle":10.16,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.8333,"angle":-10.04,"curve":0.242,"c3":0.667,"c4":0.67},{"time":1.3333,"angle":6.44}]},"Neb_Bird":{"rotate":[{},{"time":0.6667,"angle":8.09},{"time":1.3333}]},"Body_Bird12":{"rotate":[{},{"time":0.6667,"angle":-15.02},{"time":1.3333}]}},"deform":{"default":{"Eye_1":{"Eye_1":[{"offset":36,"vertices":[8.94475,2.98542,0.04681,7.41489,5.69629,1.72757,0.15907,4.67796]}]},"Eye_2":{"Eye_2":[{"vertices":[-0.43049,0.21355,-8.87964,3.98748,-2.17448,-2.38204,0,0,0,0,0,0,0,0,0,0,0,0,2.04999,-0.90851,38.42871,-19.07243,0.82323,1.43984,-48.76038,-9.12101,-1.32927,3.8399,-140.54688,9.73383,-0.62732,2.18678,-79.65277,4.29043,0.12787,0.36581,-12.63031,-1.53183,0.0753,-0.01056,0.60095,-0.71876,1.10474,0.76647,-23.96674,-11.29552,1.01569,1.77649,-60.15942,-11.25328,2.38339,4.42468,-150.276,-26.61425]}]},"Line_Body":{"Line_Body":[{"offset":6,"vertices":[-0.78719,3.16605,-1.12013,3.06411,-3.27017,4.58646,-3.74041,4.21176,-3.7866,5.50574,-4.35184,5.07077,1.53852,1.63742,1.35527,1.79208]}]}}}},"No_Idle_Sleep":{"slots":{"Cliping_Foam":{"attachment":[{"name":null}]},"Foam_1":{"attachment":[{"name":null}]},"Foam_2":{"attachment":[{"name":null}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_4":{"attachment":[{"name":null}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"attachment":[{"name":null}]},"Foam_Blue3":{"attachment":[{"name":null}]},"Shadow_bobber":{"attachment":[{"name":null}]},"Z":{"color":[{"time":0.8333,"color":"ffffffff"},{"time":1.1667,"color":"ffffff00"}],"attachment":[{"name":"Z"}]},"Z2":{"color":[{"time":1.1,"color":"ffffffff"},{"time":1.4333,"color":"ffffff00"}],"attachment":[{"time":0.2667,"name":"Z"}]},"Z3":{"color":[{"time":1.3333,"color":"ffffffff"},{"time":1.6667,"color":"ffffff00"}],"attachment":[{"time":0.5,"name":"Z"}]}},"bones":{"Eye_Close":{"rotate":[{"angle":12.04}],"translate":[{"x":1.61,"y":-3.54}]},"Body_Bird3":{"rotate":[{"angle":7.57,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":9.66,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":7.57}],"translate":[{"x":-6.6,"y":0.91}]},"Eyebrow_T2":{"rotate":[{"angle":19.69}],"translate":[{"x":-7.46,"y":-7.67}]},"Body_Bird10":{"rotate":[{},{"time":0.8333,"angle":1.34},{"time":1.6667}]},"Eyebrow_B":{"rotate":[{"angle":8.3}],"translate":[{"x":1.59,"y":-2.32}]},"Eyebrow_T3":{"rotate":[{"angle":23.12}],"translate":[{"x":-2.06,"y":-11.29}]},"Eyebrow_B2":{"rotate":[{"angle":4.61}],"translate":[{"x":6.16,"y":-6.28}]},"Body_Bird11":{"rotate":[{},{"time":0.8333,"angle":11.35},{"time":1.6667}]},"Rod_Fishing":{"rotate":[{"angle":-59.92}]},"Hand_Font":{"rotate":[{"angle":49.31}]},"Hand_Back":{"rotate":[{"angle":5.6}],"translate":[{"x":-12.94,"y":-3.32}]},"IK_Rod":{"rotate":[{"angle":-6},{"time":0.8333,"angle":-6.11},{"time":1.6667,"angle":-6}],"translate":[{"x":552.07,"y":314.23},{"time":0.8333,"x":551.86,"y":316.01},{"time":1.6667,"x":552.07,"y":314.23}]},"Body_Bird2":{"rotate":[{"angle":-10.67,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":-12.35,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":-10.67}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.8333,"x":-0.24,"y":1.94,"curve":0.25,"c3":0.75},{"time":1.6667}]},"Wire":{"scale":[{"x":0.602}]},"Hand_Font2":{"rotate":[{"angle":-23.91}]},"Wire2":{"scale":[{"x":0.613}]},"Elip_Eye2":{"translate":[{"x":-4.79,"y":-8.12}]},"Body_Bird9":{"rotate":[{"angle":-5.49},{"time":0.8333,"angle":11.34},{"time":1.6667,"angle":-5.49}]},"Elip_Eye":{"translate":[{"x":-4.19,"y":-6.16}]},"Body_Bird7":{"rotate":[{"angle":6.32},{"time":0.8333,"angle":3.73},{"time":1.6667,"angle":6.32}]},"Body_Bird4":{"rotate":[{"angle":8.88,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":4.17,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":8.88}]},"Body_Bird8":{"rotate":[{"angle":12.95},{"time":0.8333,"angle":2.72},{"time":1.6667,"angle":12.95}]},"Body_Bird6":{"rotate":[{"angle":-1.28,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":-5.99,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":-1.28}]},"Body_Bird5":{"rotate":[{"angle":10.96,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":6.25,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":10.96}]},"Neb_Bird":{"rotate":[{"angle":7.45}]},"Body_Bird12":{"rotate":[{},{"time":0.8333,"angle":-15.02},{"time":1.6667}]},"Z":{"translate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"x":55.18,"y":155.5}],"scale":[{"x":0.862,"y":0.862},{"time":1.1667,"x":3.485,"y":3.485}]},"Z2":{"translate":[{"time":0.2667,"curve":0.25,"c3":0.75},{"time":1.4333,"x":55.18,"y":155.5}],"scale":[{"time":0.2667,"x":0.647,"y":0.647},{"time":1.4333,"x":3.126,"y":3.126}]},"Z3":{"translate":[{"time":0.5,"curve":0.25,"c3":0.75},{"time":1.6667,"x":55.18,"y":155.5}],"scale":[{"time":0.5,"x":0.431,"y":0.431},{"time":1.6667,"x":2.802,"y":2.802}]}},"deform":{"default":{"Eye_1":{"Eye_1":[{"offset":36,"vertices":[8.94475,2.98542,0.04681,7.41489,5.69629,1.72757,0.15907,4.67796]}]},"Line_Body":{"Line_Body":[{"offset":6,"vertices":[-0.78719,3.16605,-1.12013,3.06411,-3.27017,4.58646,-3.74041,4.21176,-3.7866,5.50574,-4.35184,5.07077,1.53852,1.63742,1.35527,1.79208]}]}}}},"No_Sleep":{"slots":{"Cliping_Foam":{"attachment":[{"name":null}]},"Eye_1":{"color":[{"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"}]},"Eye_2":{"color":[{"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"}]},"Eye_3":{"color":[{"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"}]},"Eye_4":{"color":[{"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"}]},"Eye_Close":{"color":[{"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"}]},"Eye_Close2":{"color":[{"color":"ffffff00"},{"time":0.4,"color":"ffffffff"}]},"Foam_1":{"attachment":[{"name":null}]},"Foam_2":{"attachment":[{"name":null}]},"Foam_3":{"attachment":[{"name":null}]},"Foam_4":{"attachment":[{"name":null}]},"Foam_Blue1":{"attachment":[{"name":null}]},"Foam_Blue2":{"attachment":[{"name":null}]},"Foam_Blue3":{"attachment":[{"name":null}]},"Shadow_bobber":{"attachment":[{"name":null}]}},"bones":{"Eye_Close":{"rotate":[{"angle":15.26},{"time":0.3333,"angle":7.2},{"time":0.7,"angle":18.81},{"time":1,"angle":12.04}],"translate":[{"x":-7.21,"y":-5.48},{"time":0.3333,"x":1.36,"y":-5.6},{"time":0.7,"x":5.48,"y":-5.02},{"time":1,"x":1.61,"y":-3.54}],"scale":[{"x":-0.948,"y":1.39,"curve":"stepped"},{"time":0.3333,"x":-0.948,"y":1.39},{"time":1}]},"Body_Bird3":{"rotate":[{"angle":2.34,"curve":0.379,"c2":0.6,"c3":0.724},{"time":1,"angle":7.57}],"translate":[{},{"time":1,"x":-6.6,"y":0.91}]},"Eyebrow_T2":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1,"angle":19.69}],"translate":[{"curve":0.25,"c3":0.75},{"time":1,"x":-7.46,"y":-7.67}]},"Eyebrow_B":{"rotate":[{},{"time":1,"angle":8.3}],"translate":[{},{"time":1,"x":1.59,"y":-2.32}]},"Eyebrow_T3":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1,"angle":23.12}],"translate":[{"curve":0.25,"c3":0.75},{"time":1,"x":-2.06,"y":-11.29}]},"Eyebrow_B2":{"rotate":[{},{"time":1,"angle":4.61}],"translate":[{},{"time":1,"x":6.16,"y":-6.28}]},"Rod_Fishing":{"rotate":[{"angle":-26,"curve":0.25,"c3":0.75},{"time":1,"angle":-59.92}]},"Hand_Font":{"rotate":[{"angle":49.31}]},"Hand_Back":{"rotate":[{"angle":-3.71,"curve":0.25,"c3":0.75},{"time":1,"angle":5.6}],"translate":[{"curve":0.25,"c3":0.75},{"time":1,"x":-12.94,"y":-3.32}]},"IK_Rod":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1,"angle":-6}],"translate":[{"x":539.7,"y":338.39,"curve":0.25,"c3":0.625,"c4":0.5},{"time":1,"x":552.07,"y":314.23}]},"Body_Bird2":{"rotate":[{"angle":-14.17,"curve":0.25,"c3":0.75},{"time":1,"angle":-10.67}]},"Eye_L5":{"translate":[{"x":-3.75,"y":44.81},{"time":0.4,"x":-2.33,"y":27.79},{"time":1}]},"Wire":{"scale":[{"x":0.315,"curve":0.25,"c3":0.75},{"time":1,"x":0.602}]},"Hand_Font2":{"rotate":[{"angle":-28.61,"curve":0.25,"c3":0.75},{"time":1,"angle":-23.91}]},"Wire2":{"scale":[{"x":0.527,"curve":0.25,"c3":0.75},{"time":1,"x":0.613}]},"Elip_Eye2":{"translate":[{"x":-4.79,"y":-8.12}]},"Body_Bird9":{"rotate":[{"angle":-5.49}]},"Elip_Eye":{"translate":[{"x":-4.19,"y":-6.16}]},"Body_Bird7":{"rotate":[{"angle":6.32}]},"Body_Bird4":{"rotate":[{"angle":4.36,"curve":0.25,"c3":0.75},{"time":1,"angle":8.88}]},"Body_Bird8":{"rotate":[{"angle":12.95}]},"Body_Bird6":{"rotate":[{"angle":-5.81,"curve":0.375,"c2":0.5,"c3":0.75},{"time":1,"angle":-1.28}]},"Body_Bird5":{"rotate":[{"angle":6.44,"curve":0.379,"c2":0.6,"c3":0.724},{"time":1,"angle":10.96}]},"Neb_Bird":{"rotate":[{},{"time":1,"angle":7.45}]},"Eye_L2":{"rotate":[{"angle":-9.07},{"time":1}],"translate":[{"x":-2.53,"y":45.24},{"time":0.4,"x":-1.25,"y":28.81},{"time":0.8667}],"scale":[{"x":0.786,"y":0.786,"curve":"stepped"},{"time":0.4,"x":0.786,"y":0.786},{"time":1}]},"Eye_L3":{"translate":[{"x":13.05,"y":-155.65},{"time":0.4,"x":4.61,"y":-55},{"time":1}],"scale":[{"x":0.438,"y":0.363},{"time":1}]},"Eye_L6":{"translate":[{"x":19.7,"y":-132.48},{"time":0.4,"x":11.83,"y":-38.71},{"time":1}]}},"deform":{"default":{"Eye_1":{"Eye_1":[{"offset":36,"vertices":[8.94475,2.98542,0.04681,7.41489,5.69629,1.72757,0.15907,4.67796]}]},"Eye_2":{"Eye_2":[{"vertices":[-0.43049,0.21355,-8.87964,3.98748,-2.17448,-2.38204,0,0,0,0,0,0,0,0,0,0,0,0,2.04999,-0.90851,38.42871,-19.07243,0.82323,1.43984,-48.76038,-9.12101,-1.32927,3.8399,-140.54688,9.73383,-0.62732,2.18678,-79.65277,4.29043,0.12787,0.36581,-12.63031,-1.53183,0.0753,-0.01056,0.60095,-0.71876,1.10474,0.76647,-23.96674,-11.29552,1.01569,1.77649,-60.15942,-11.25328,2.38339,4.42468,-150.276,-26.61425]},{"time":0.1667}]},"Line_Body":{"Line_Body":[{"offset":6,"vertices":[-0.78719,3.16605,-1.12013,3.06411,-3.27017,4.58646,-3.74041,4.21176,-3.7866,5.50574,-4.35184,5.07077,1.53852,1.63742,1.35527,1.79208]}]}}}},"Start_Fishing":{"slots":{"Cliping_Foam":{"attachment":[{"name":null}]},"Eye_1":{"color":[{"time":1.4667,"color":"ffffff00"},{"time":1.7,"color":"ffffffff"}],"attachment":[{"name":null},{"time":1.4667,"name":"Eye_1"}]},"Eye_2":{"color":[{"time":1.4667,"color":"ffffff00"},{"time":1.7,"color":"ffffffff"}],"attachment":[{"name":null},{"time":1.4667,"name":"Eye_2"}]},"Eye_3":{"color":[{"time":1.4667,"color":"ffffff00"},{"time":1.7,"color":"ffffffff"}],"attachment":[{"name":null},{"time":1.4667,"name":"Eye_1"}]},"Eye_4":{"color":[{"time":1.4667,"color":"ffffff00"},{"time":1.7,"color":"ffffffff"}],"attachment":[{"name":null},{"time":1.4667,"name":"Eye_2"}]},"Eye_Close":{"color":[{"time":1.4667,"color":"ffffff00"},{"time":1.7,"color":"ffffffff"}],"attachment":[{"name":null},{"time":1.4667,"name":"Eye_Close"}]},"Eye_Close2":{"color":[{"time":1.4667,"color":"ffffff00"},{"time":1.7,"color":"ffffffff"}],"attachment":[{"name":null},{"time":1.4667,"name":"Eye_Close"}]},"Foam_1":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_1"}]},"Foam_2":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_2"}]},"Foam_3":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_1"}]},"Foam_4":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_4"}]},"Foam_Blue1":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_Blue1"}]},"Foam_Blue2":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_Blue2"}]},"Foam_Blue3":{"color":[{"time":2,"color":"ffffff00"},{"time":2.2333,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2,"name":"Foam_Blue3"}]},"Fx/Water (1)":{"attachment":[{"time":1.8502,"name":"Fx/Water (1)"},{"time":1.892,"name":"Fx/Water (2)"},{"time":1.9338,"name":"Fx/Water (3)"},{"time":1.9756,"name":"Fx/Water (4)"},{"time":2.0173,"name":"Fx/Water (5)"},{"time":2.0591,"name":"Fx/Water (6)"},{"time":2.1009,"name":"Fx/Water (8)"},{"time":2.1427,"name":"Fx/Water (10)"},{"time":2.1845,"name":"Fx/Water (12)"},{"time":2.2262,"name":"Fx/Water (14)"},{"time":2.268,"name":"Fx/Water (15)"},{"time":2.3098,"name":null}]},"Fx/Water_2 (1)":{"attachment":[{"time":1.8,"name":"Fx/Water_2 (1)"},{"time":1.8333,"name":"Fx/Water_2 (2)"},{"time":1.8667,"name":"Fx/Water_2 (3)"},{"time":1.9,"name":"Fx/Water_2 (4)"},{"time":1.9333,"name":"Fx/Water_2 (5)"},{"time":1.9667,"name":"Fx/Water_2 (6)"},{"time":2,"name":"Fx/Water_2 (7)"},{"time":2.0333,"name":"Fx/Water_2 (8)"},{"time":2.0667,"name":"Fx/Water_2 (9)"},{"time":2.1,"name":"Fx/Water_2 (11)"},{"time":2.1333,"name":"Fx/Water_2 (13)"},{"time":2.1667,"name":"Fx/Water_2 (15)"},{"time":2.2,"name":"Fx/Water_2 (16)"},{"time":2.2333,"name":"Fx/Water_2 (17)"},{"time":2.2667,"name":null}]},"Shadow_bobber":{"color":[{"time":2.1,"color":"ffffff00"},{"time":2.3,"color":"ffffffff"}],"attachment":[{"name":null},{"time":2.1,"name":"Shadow_bobber"}]},"Shadown_body":{"color":[{"time":0.3333,"color":"ffffffff"},{"time":0.7333,"color":"ffffff00","curve":"stepped"},{"time":1.0667,"color":"ffffff00"},{"time":1.3333,"color":"ffffffff"}]}},"bones":{"Body_Bird2":{"rotate":[{"angle":-14.17,"curve":0.25,"c3":0.75},{"time":0.2333,"angle":-8.44,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-41,"curve":0.25,"c3":0.75},{"time":1.1,"angle":1.39,"curve":0.25,"c3":0.75},{"time":1.5,"angle":-16.85,"curve":0.25,"c3":0.75},{"time":2.3333}]},"Rod_Fishing":{"rotate":[{"angle":-26,"curve":0.25,"c3":0.75},{"time":0.4333,"angle":-6.43,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":-93.68,"curve":0.25,"c3":0.75},{"time":0.9667,"angle":-115,"curve":0.25,"c3":0.75},{"time":1.2,"angle":-4.57,"curve":0.25,"c3":0.75},{"time":1.5,"angle":29.44,"curve":0.25,"c3":0.75},{"time":2.3333}],"translate":[{"time":0.4333,"curve":0.25,"c3":0.75},{"time":0.6667,"x":-35.99,"y":24.97,"curve":0.25,"c3":0.75},{"time":0.9667,"x":-21.09,"y":15.54,"curve":0.25,"c3":0.75},{"time":1.2,"x":-13.68,"y":3.4,"curve":0.25,"c3":0.75},{"time":2.3333}]},"Hand_Font":{"rotate":[{"angle":49.31,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":20.03,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-117.59,"curve":0.25,"c3":0.75},{"time":0.8667,"angle":-130.76,"curve":0.25,"c3":0.75},{"time":1.1,"angle":-17.59,"curve":0.25,"c3":0.75},{"time":1.5,"angle":24.74,"curve":0.25,"c3":0.75},{"time":2.3333}],"translate":[{"time":0.3667,"curve":0.25,"c3":0.75},{"time":0.6,"x":4.46,"y":-30.79,"curve":"stepped"},{"time":0.8667,"x":4.46,"y":-30.79,"curve":0.25,"c3":0.75},{"time":1.1}]},"Eye_Close":{"rotate":[{"angle":20.49},{"time":1.1667,"angle":16.93},{"time":1.5,"angle":12.18},{"time":1.6667,"angle":12.61},{"time":2,"angle":15.66},{"time":2.3333}],"translate":[{"x":1.2,"y":-6.62},{"time":1.1667,"x":1.33,"y":-3.37,"curve":"stepped"},{"time":1.6667,"x":1.33,"y":-3.37},{"time":2,"x":4.58,"y":-2.55},{"time":2.3333}],"scale":[{"x":-0.948,"y":1.39,"curve":"stepped"},{"time":1.6667,"x":-0.948,"y":1.39},{"time":2,"x":0.038,"y":1.195},{"time":2.3333}]},"Eye_L3":{"translate":[{"time":1.4667,"x":13.05,"y":-155.65},{"time":1.7,"x":4.61,"y":-55},{"time":2.3333}],"scale":[{"time":1.4667,"x":0.438,"y":0.363},{"time":2.3333}]},"Eye_L5":{"translate":[{"time":1.4667,"x":-3.75,"y":44.81},{"time":1.7,"x":-2.33,"y":27.79},{"time":2.3333}]},"Eye_L6":{"translate":[{"time":1.4667,"x":19.7,"y":-132.48},{"time":1.7,"x":11.83,"y":-38.71},{"time":2.3333}]},"Eye_L2":{"rotate":[{"time":1.4667,"angle":-9.07},{"time":2.3333}],"translate":[{"time":1.4667,"x":-2.53,"y":45.24},{"time":1.7,"x":-1.25,"y":28.81},{"time":2.1667}],"scale":[{"time":1.4667,"x":0.786,"y":0.786,"curve":"stepped"},{"time":1.7,"x":0.786,"y":0.786},{"time":2.3333}]},"Hand_Font2":{"rotate":[{"angle":-28.61,"curve":0.25,"c3":0.75},{"time":0.3,"angle":-12.44,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-3.88,"curve":0.25,"c3":0.75},{"time":0.9667,"angle":-34.12,"curve":0.25,"c3":0.75},{"time":1.2}]},"Hand_Back":{"rotate":[{"angle":-3.71,"curve":0.25,"c3":0.75},{"time":0.2333,"angle":-12.92,"curve":0.25,"c3":0.75},{"time":0.4667,"angle":3.36,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":-75.25,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":1.97,"curve":0.25,"c3":0.75},{"time":1.4333,"angle":-11.96,"curve":0.25,"c3":0.75},{"time":1.9667,"angle":14.44,"curve":0.25,"c3":0.75},{"time":2.3333}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.2333,"x":6.73,"y":-23.2,"curve":0.25,"c3":0.75},{"time":0.5667,"curve":0.25,"c3":0.75},{"time":1.0667,"x":-7.68,"y":3.08,"curve":0.25,"c3":0.75},{"time":1.9667}]},"IK_Rod":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.1667,"angle":14.96,"curve":0.25,"c3":0.75},{"time":0.4,"angle":6.33,"curve":0.25,"c3":0.75},{"time":0.6667,"angle":175.93,"curve":0.25,"c3":0.75},{"time":0.9333,"angle":-105.76,"curve":0.25,"c3":0.75},{"time":1.1667,"angle":18.03,"curve":0.25,"c3":0.75},{"time":1.4333,"angle":140.08,"curve":0.25,"c3":0.75},{"time":1.6667,"angle":-135.19,"curve":0.25,"c3":0.75},{"time":1.8667,"angle":-86.46,"curve":0.253,"c3":0.622,"c4":0.48},{"time":2.1,"angle":23.23,"curve":0.371,"c2":0.48,"c3":0.752},{"time":2.3333}],"translate":[{"x":539.7,"y":338.39,"curve":0.25,"c3":0.75},{"time":0.1667,"x":547.02,"y":342.05,"curve":0.25,"c3":0.75},{"time":0.4,"x":245.99,"y":318.26,"curve":0.25,"c3":0.75},{"time":0.6667,"x":498.58,"y":772.93,"curve":0.25,"c3":0.75},{"time":0.9333,"x":1325.56,"y":679.85,"curve":0.25,"c3":0.75},{"time":1.1667,"x":768.02,"y":387.34,"curve":0.25,"c3":0.75},{"time":1.4333,"x":-30.53,"y":774.16,"curve":0.25,"c3":0.75},{"time":1.6667,"x":-30.53,"y":96.26,"curve":0.25,"c3":0.75},{"time":1.8667,"x":33.93,"y":-33.98,"curve":0.253,"c3":0.622,"c4":0.48},{"time":2.1,"x":-18.84,"y":-12.72,"curve":0.371,"c2":0.48,"c3":0.752},{"time":2.3333}]},"Wire":{"scale":[{"x":0.315,"curve":0.25,"c3":0.75},{"time":0.3,"x":-0.061,"curve":0.25,"c3":0.75},{"time":0.4667,"x":0.699,"curve":0.25,"c3":0.75},{"time":0.9,"x":0.067,"curve":0.25,"c3":0.75},{"time":1.2667,"x":0.313,"curve":0.25,"c3":0.75},{"time":1.5667,"x":0.401,"curve":0.25,"c3":0.75},{"time":1.8333}]},"Wire2":{"scale":[{"x":0.527,"curve":0.25,"c3":0.75},{"time":0.4667}]},"Elip_Eye2":{"translate":[{"x":-4.79,"y":-8.12},{"time":0.3333,"x":-2.38,"y":-7.63},{"time":0.6667,"x":5.4,"y":0.53},{"time":1.3,"x":1.53,"y":-4.45},{"time":1.6667,"x":-0.85,"y":-7.08}]},"Elip_Eye":{"translate":[{"x":-4.19,"y":-6.16},{"time":0.3333,"x":-4.7,"y":-7.37},{"time":0.6667,"x":3.52,"y":2.02,"curve":"stepped"},{"time":1,"x":3.52,"y":2.02},{"time":1.3,"x":2.35,"y":-5.78},{"time":1.6667,"x":-0.61,"y":-6.15}]},"Hand_Font3":{"rotate":[{"time":0.3,"curve":0.25,"c3":0.75},{"time":0.6,"angle":38.58,"curve":0.25,"c3":0.75},{"time":1.2}]},"Body_Bird3":{"rotate":[{"angle":0.29,"curve":0.25,"c3":0.75},{"time":0.1333,"angle":-4.74,"curve":0.25,"c3":0.75},{"time":0.4,"angle":11.8,"curve":0.25,"c3":0.75},{"time":0.8,"angle":-5.63,"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-11.81,"curve":0.25,"c3":0.75},{"time":1.5,"angle":13.44,"curve":0.25,"c3":0.75},{"time":1.8333,"angle":-4.14,"curve":0.25,"c3":0.75},{"time":2.3333,"angle":0.29}]},"Fx/Water (1)":{"rotate":[{"time":1.8502,"angle":-9.8},{"time":2.1,"angle":1.11}],"translate":[{"time":1.8502,"x":-10.35,"y":1.41},{"time":2.1,"x":-7.58,"y":-0.36},{"time":2.1009,"x":-27.08,"y":-24.37},{"time":2.1333,"x":-0.17,"y":1.04}],"scale":[{"time":1.8502,"x":1.123,"y":1.123},{"time":2.1,"x":0.638,"y":0.638},{"time":2.1009,"x":0.426,"y":0.426}]},"Body_Bird9":{"rotate":[{"angle":-5.49,"curve":0.25,"c3":0.75},{"time":0.1667,"angle":-17.54,"curve":0.25,"c3":0.75},{"time":0.5,"angle":21.83,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":-27.07,"curve":0.25,"c3":0.75},{"time":1.5,"angle":5.64,"curve":0.25,"c3":0.75},{"time":2.3333,"angle":-5.49}]},"Body_Bird8":{"rotate":[{"angle":12.95}]},"Body_Bird7":{"rotate":[{"angle":6.32,"curve":0.25,"c3":0.75},{"time":0.2667,"angle":17.94,"curve":0.25,"c3":0.75},{"time":0.7,"angle":-20.09,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":11.29,"curve":0.25,"c3":0.75},{"time":1.5333,"angle":3.18,"curve":0.25,"c3":0.75},{"time":2.3333,"angle":6.32}]},"Eyebrow_T2":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.3667,"angle":23.31,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":39.48,"curve":0.25,"c3":0.75},{"time":1.3,"angle":33.38,"curve":0.25,"c3":0.75},{"time":2.3333}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3667,"x":-6.29,"y":-8.77,"curve":0.25,"c3":0.75},{"time":0.7333,"x":-4.64,"y":-4.73,"curve":0.25,"c3":0.75},{"time":1.3,"x":-9.37,"y":-11.54,"curve":0.25,"c3":0.75},{"time":2.3333}]},"Eyebrow_T3":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"angle":28.71,"curve":0.25,"c3":0.75},{"time":0.7333,"angle":34.86,"curve":0.25,"c3":0.75},{"time":1.3,"angle":27.82,"curve":0.25,"c3":0.75},{"time":2.3333}],"translate":[{"curve":0.25,"c3":0.75},{"time":0.3333,"x":3.17,"y":-15.84,"curve":0.25,"c3":0.75},{"time":0.7333,"x":-1.2,"y":-8.11,"curve":0.25,"c3":0.75},{"time":1.3,"x":5.75,"y":-14.3,"curve":0.25,"c3":0.75},{"time":2.3333}]},"Body_Bird4":{"rotate":[{"angle":4.36,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":15.75,"curve":0.25,"c3":0.75},{"time":0.8333,"angle":-30.27,"curve":0.25,"c3":0.75},{"time":1.3,"angle":9.25,"curve":0.25,"c3":0.75},{"time":1.8,"angle":-13.47,"curve":0.25,"c3":0.75},{"time":2.3333,"angle":4.36}]},"Body_Bird6":{"rotate":[{"angle":3.98,"curve":0.25,"c3":0.75},{"time":0.2,"angle":-26.22,"curve":0.25,"c3":0.75},{"time":0.6,"angle":19.57,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":-30.12,"curve":0.25,"c3":0.75},{"time":1.5,"angle":10.39,"curve":0.25,"c3":0.75},{"time":2,"angle":-21.28,"curve":0.25,"c3":0.75},{"time":2.3333,"angle":3.98}]},"Body_Bird5":{"rotate":[{"angle":3.56,"curve":0.25,"c3":0.75},{"time":0.2,"angle":-28.99,"curve":0.25,"c3":0.75},{"time":0.6,"angle":16.79,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":-32.9,"curve":0.25,"c3":0.75},{"time":1.5,"angle":7.62,"curve":0.25,"c3":0.75},{"time":2,"angle":-24.05,"curve":0.25,"c3":0.75},{"time":2.3333,"angle":3.56}]},"Body_Bird10":{"rotate":[{"curve":0.25,"c3":0.75},{"time":0.4,"angle":5.42,"curve":"stepped"},{"time":0.9333,"angle":5.42,"curve":0.25,"c3":0.75},{"time":1.2333,"angle":-4.24,"curve":0.25,"c3":0.75},{"time":1.5333,"angle":8.29,"curve":0.25,"c3":0.75},{"time":2.3333}]},"Body_Bird11":{"rotate":[{},{"time":0.2333,"angle":-8.75},{"time":1.2333,"angle":30.72},{"time":1.4333,"angle":6.27},{"time":1.7333,"angle":22.14},{"time":2.3333}]},"Eyebrow_B":{"rotate":[{},{"time":0.4,"angle":12.81},{"time":0.8,"angle":27.87},{"time":1.3667,"angle":4.47},{"time":1.9667}],"translate":[{},{"time":0.4,"x":-0.12,"y":-7.74},{"time":0.8,"x":3.35,"y":-10.19},{"time":1.3667,"x":0.37,"y":-1.34},{"time":1.9667}]},"Eyebrow_B2":{"rotate":[{},{"time":0.4,"angle":9.89},{"time":0.8,"angle":15.14},{"time":1.9667}],"translate":[{},{"time":0.4,"x":0.28,"y":-5.07},{"time":0.8,"x":7.34,"y":-7.89},{"time":1.3667,"x":-2.52,"y":-3.12},{"time":1.9667}]}},"deform":{"default":{"Eye_1":{"Eye_1":[{"offset":36,"curve":"stepped","vertices":[8.94475,2.98542,0.04681,7.41489,5.69629,1.72757,0.15907,4.67796]},{"time":1.6667,"offset":36,"vertices":[8.94475,2.98542,0.04681,7.41489,5.69629,1.72757,0.15907,4.67796]},{"time":2}]},"Eye_2":{"Eye_2":[{"curve":"stepped","vertices":[-0.43049,0.21355,-8.87964,3.98748,-2.17448,-2.38204,0,0,0,0,0,0,0,0,0,0,0,0,2.04999,-0.90851,38.42871,-19.07243,0.82323,1.43984,-48.76038,-9.12101,-1.32927,3.8399,-140.54688,9.73383,-0.62732,2.18678,-79.65277,4.29043,0.12787,0.36581,-12.63031,-1.53183,0.0753,-0.01056,0.60095,-0.71876,1.10474,0.76647,-23.96674,-11.29552,1.01569,1.77649,-60.15942,-11.25328,2.38339,4.42468,-150.276,-26.61425]},{"time":1.6667,"vertices":[-0.43049,0.21355,-8.87964,3.98748,-2.17448,-2.38204,0,0,0,0,0,0,0,0,0,0,0,0,2.04999,-0.90851,38.42871,-19.07243,0.82323,1.43984,-48.76038,-9.12101,-1.32927,3.8399,-140.54688,9.73383,-0.62732,2.18678,-79.65277,4.29043,0.12787,0.36581,-12.63031,-1.53183,0.0753,-0.01056,0.60095,-0.71876,1.10474,0.76647,-23.96674,-11.29552,1.01569,1.77649,-60.15942,-11.25328,2.38339,4.42468,-150.276,-26.61425]},{"time":2}]},"Line_Body":{"Line_Body":[{},{"time":0.4,"vertices":[2.10955,2.05739,0,0,0,0,3.40936,3.49299,3.12857,4.20265,-0.03851,6.26624,-1.12331,6.16579,0.27483,6.13385,-0.68396,6.00333,0.27121,1.5521,0.33753,1.53905,0,0,0,0,-0.02634,-6.03035]},{"time":0.7667,"vertices":[3.95017,2.47041,0,0,0,0,-0.6914,4.42041,-0.50105,4.44603,-1.29581,0.26058,-1.28344,0.31594,0.39143,-0.73297,0.35966,-0.74907,-2.09676,-0.4946,-2.11602,-0.4042,0,0,1.71959,0.55825,1.50468,0.48848,2.01,1.12775]},{"time":1.2667,"vertices":[1.35487,1.57265,0,0,0,0,0.78781,2.52974,0.76671,2.88166,1.23852,1.66654,0.33359,1.7543,2.49791,2.50617,1.86864,2.71873,0.5566,1.35322,0.60736,1.3264]},{"time":1.5333,"vertices":[2.09976,1.95672,0,0,0,0,2.2765,2.69105,2.20368,3.17107,1.05866,6.16821,-0.11968,6.34333,2.23639,5.24339,1.36776,5.64838,0.26544,1.51908,0.33035,1.5063]},{"time":2.3333}]}}}}}},[0]]],0,0,[0],[-1],[4]]]]
